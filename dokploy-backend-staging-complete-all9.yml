# BizOSaaS Backend Services - STAGING Environment (Complete - All 9 Services)
# Complete backend deployment with all services

services:
  # ==========================================
  # DATABASE INITIALIZATION
  # Creates required databases
  # ==========================================
  db-init:
    image: postgres:15-alpine
    container_name: bizosaas-db-init-staging
    networks:
      - dokploy-network
    environment:
      - PGPASSWORD=BizOSaaS2025!StagingDB
    command: >
      sh -c "
      sleep 5 &&
      psql -h bizosaas-postgres-staging -U admin -d postgres -c 'CREATE DATABASE saleor_staging;' || echo 'saleor_staging exists' &&
      psql -h bizosaas-postgres-staging -U admin -d postgres -c 'CREATE DATABASE bizosaas_staging;' || echo 'bizosaas_staging exists' &&
      psql -h bizosaas-postgres-staging -U admin -d saleor_staging -c 'CREATE EXTENSION IF NOT EXISTS vector;' &&
      psql -h bizosaas-postgres-staging -U admin -d bizosaas_staging -c 'CREATE EXTENSION IF NOT EXISTS vector;'
      "
    restart: "no"

  # ==========================================
  # 1. SALEOR E-COMMERCE PLATFORM
  # Full-featured e-commerce API
  # ==========================================
  saleor-api:
    image: ghcr.io/saleor/saleor:3.20
    container_name: bizosaas-saleor-staging
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/saleor_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/7
      - SECRET_KEY=${SALEOR_SECRET_KEY:-staging-saleor-secret-key-bizosaas-2025}
      - ALLOWED_HOSTS=stg.coreldove.com,bizosaas-saleor-staging,localhost
      - ALLOWED_CLIENT_HOSTS=stg.coreldove.com,localhost
      - DEBUG=False
      - DEFAULT_FROM_EMAIL=noreply@stg.coreldove.com
      - CELERY_BROKER_URL=redis://bizosaas-redis-staging:6379/7
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ==========================================
  # 2. BRAIN API - AI Central Hub
  # Main API coordinator for all services
  # ==========================================
  brain-api:
    build:
      context: https://github.com/Bizoholic-Digital/bizosaas-platform.git#main:bizosaas-platform/ai/services/bizosaas-brain
      dockerfile: Dockerfile
    container_name: bizosaas-brain-staging
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/0
      - VAULT_ADDR=http://bizosaas-vault-staging:8200
      - VAULT_TOKEN=staging-root-token-bizosaas-2025
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-sk-or-v1-default}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-proj-default}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-sk-ant-default}
      - PYTHONPATH=/app
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # 3. WAGTAIL CMS
  # Headless content management
  # ==========================================
  wagtail-cms:
    build:
      context: https://github.com/Bizoholic-Digital/bizosaas-platform.git#main:bizosaas-platform/backend/services/cms
      dockerfile: Dockerfile
    container_name: bizosaas-wagtail-staging
    ports:
      - "8002:4000"
    environment:
      - DJANGO_SETTINGS_MODULE=wagtail_cms.settings.production
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/1
      - SECRET_KEY=${DJANGO_SECRET_KEY:-staging-wagtail-secret-key-bizosaas-2025}
      - ALLOWED_HOSTS=stg.bizoholic.com,bizosaas-wagtail-staging,localhost
      - PYTHONPATH=/app
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # 4. DJANGO CRM
  # Customer relationship management
  # ==========================================
  django-crm:
    build:
      context: https://github.com/Bizoholic-Digital/bizosaas-platform.git#main:bizosaas-platform/backend/services/crm/django-crm
      dockerfile: Dockerfile
    container_name: bizosaas-django-crm-staging
    ports:
      - "8003:8003"
    environment:
      - DJANGO_SETTINGS_MODULE=crm_project.settings.production
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/2
      - SECRET_KEY=${DJANGO_CRM_SECRET_KEY:-staging-django-crm-secret-key-bizosaas-2025}
      - ALLOWED_HOSTS=stg.bizoholic.com,bizosaas-django-crm-staging,localhost
      - PYTHONPATH=/app
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # 5. BUSINESS DIRECTORY BACKEND
  # Directory service API
  # ==========================================
  business-directory-backend:
    image: ghcr.io/bizoholic-digital/business-directory-backend:staging
    container_name: bizosaas-directory-backend-staging
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/3
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # 6. CORELDOVE BACKEND
  # CorelDove e-commerce backend
  # ==========================================
  coreldove-backend:
    image: ghcr.io/bizoholic-digital/coreldove-backend:staging
    container_name: bizosaas-coreldove-backend-staging
    ports:
      - "8005:8005"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/4
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # 7. TEMPORAL INTEGRATION
  # Workflow integration service
  # ==========================================
  temporal-integration:
    image: ghcr.io/bizoholic-digital/temporal-integration:staging
    container_name: bizosaas-temporal-integration-staging
    ports:
      - "8009:8009"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/5
      - TEMPORAL_ADDRESS=bizosaas-temporal-server-staging:7233
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # 8. AI AGENTS SERVICE
  # Enhanced AI agents
  # ==========================================
  ai-agents:
    image: ghcr.io/bizoholic-digital/ai-agents:staging
    container_name: bizosaas-ai-agents-staging
    ports:
      - "8010:8000"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/6
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-proj-default}
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # 9. AMAZON SOURCING
  # Amazon product sourcing service
  # ==========================================
  amazon-sourcing:
    image: ghcr.io/bizoholic-digital/amazon-sourcing:staging
    container_name: bizosaas-amazon-sourcing-staging
    ports:
      - "8085:8080"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://admin:BizOSaaS2025!StagingDB@bizosaas-postgres-staging:5432/bizosaas_staging
      - REDIS_URL=redis://bizosaas-redis-staging:6379/8
    networks:
      - dokploy-network
    restart: unless-stopped
    depends_on:
      - db-init
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  dokploy-network:
    external: true

# ==================================================
# BACKEND SERVICES PROJECT SUMMARY (COMPLETE):
# ==================================================
# Container Count: 10 (1 init + 9 backend services)
# Purpose: Complete backend for SaaS platform
# Services:
#   1. Database Init - Creates databases ✅
#   2. Saleor API (8000) - E-commerce ✅ OFFICIAL IMAGE
#   3. Brain API (8001) - AI coordinator ✅ BUILT FROM GITHUB
#   4. Wagtail CMS (8002→4000) - CMS ✅ BUILT FROM GITHUB (FIXED SETTINGS)
#   5. Django CRM (8003) - CRM ✅ BUILT FROM GITHUB (FIXED SETTINGS)
#   6. Business Directory Backend (8004) - Directory ⚠️ NEEDS REGISTRY IMAGE
#   7. CorelDove Backend (8005) - E-commerce backend ⚠️ NEEDS REGISTRY IMAGE
#   8. Temporal Integration (8009) - Workflows ⚠️ NEEDS REGISTRY IMAGE
#   9. AI Agents (8010) - Enhanced AI ⚠️ NEEDS REGISTRY IMAGE
#   10. Amazon Sourcing (8085) - Product sourcing ⚠️ NEEDS REGISTRY IMAGE
# Dependencies: Infrastructure (PostgreSQL, Redis, Vault, Temporal)
# Note: Services 6-10 require images pushed to ghcr.io first
# ==================================================
