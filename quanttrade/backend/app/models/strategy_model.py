"""
Trading Strategy Models for QuantTrade Platform
"""

from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, Text, ForeignKey, Enum
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from core.database import Base
import enum


class StrategyType(str, enum.Enum):
    """Strategy type enumeration"""
    MOMENTUM = "momentum"
    MEAN_REVERSION = "mean_reversion"
    BREAKOUT = "breakout"
    ARBITRAGE = "arbitrage"
    PAIRS_TRADING = "pairs_trading"
    MOMENTUM_SCANNER = "momentum_scanner"
    NEWS_SENTIMENT = "news_sentiment"
    TECHNICAL = "technical"
    FUNDAMENTAL = "fundamental"
    AI_GENERATED = "ai_generated"
    CUSTOM = "custom"


class StrategyStatus(str, enum.Enum):
    """Strategy status enumeration"""
    DRAFT = "draft"
    ACTIVE = "active"
    PAUSED = "paused"
    STOPPED = "stopped"
    ARCHIVED = "archived"


class Strategy(Base):
    """Trading strategy definition and configuration"""
    __tablename__ = "strategies"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)

    # Strategy identification
    name = Column(String(100), nullable=False)
    description = Column(Text)
    strategy_type = Column(Enum(StrategyType), nullable=False)
    status = Column(Enum(StrategyStatus), default=StrategyStatus.DRAFT)

    # Strategy parameters (JSON)
    parameters = Column(Text, nullable=False)  # JSON configuration
    indicators = Column(Text)  # JSON array of technical indicators used
    entry_conditions = Column(Text)  # JSON entry signal conditions
    exit_conditions = Column(Text)  # JSON exit signal conditions

    # Risk management
    max_position_size = Column(Float, default=0.1)  # 10% of portfolio
    stop_loss_percent = Column(Float, default=0.05)  # 5% stop loss
    take_profit_percent = Column(Float, default=0.15)  # 15% take profit
    max_drawdown_percent = Column(Float, default=0.2)  # 20% max drawdown
    risk_per_trade = Column(Float, default=0.02)  # 2% risk per trade

    # Position management
    position_sizing_method = Column(String(50), default="fixed_percent")
    rebalance_frequency = Column(String(20), default="daily")
    max_concurrent_positions = Column(Integer, default=10)

    # Performance tracking
    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    win_rate = Column(Float, default=0.0)
    total_pnl = Column(Float, default=0.0)
    total_return_percent = Column(Float, default=0.0)

    # Risk metrics
    sharpe_ratio = Column(Float, default=0.0)
    sortino_ratio = Column(Float, default=0.0)
    max_drawdown = Column(Float, default=0.0)
    calmar_ratio = Column(Float, default=0.0)

    # AI/ML specific
    model_type = Column(String(50))  # linear, tree, neural_network, ensemble
    training_period = Column(Integer)  # Days of historical data for training
    retrain_frequency = Column(String(20))  # daily, weekly, monthly
    feature_importance = Column(Text)  # JSON of feature importance scores
    prediction_confidence = Column(Float)  # Current model confidence

    # Execution settings
    is_automated = Column(Boolean, default=False)
    is_paper_trading = Column(Boolean, default=True)
    auto_execute_signals = Column(Boolean, default=False)
    notification_enabled = Column(Boolean, default=True)

    # Version control
    version = Column(String(20), default="1.0")
    parent_strategy_id = Column(Integer, ForeignKey("strategies.id"))

    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    last_executed = Column(DateTime(timezone=True))
    next_execution = Column(DateTime(timezone=True))

    # Relationships
    user = relationship("User", back_populates="strategies")
    positions = relationship("Position", back_populates="strategy")
    backtests = relationship("Backtest", back_populates="strategy", cascade="all, delete-orphan")
    signals = relationship("Signal", back_populates="strategy", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Strategy(id={self.id}, name='{self.name}', type={self.strategy_type})>"


class Signal(Base):
    """Trading signals generated by strategies"""
    __tablename__ = "signals"

    id = Column(Integer, primary_key=True, index=True)
    strategy_id = Column(Integer, ForeignKey("strategies.id"), nullable=False)

    # Signal details
    symbol = Column(String(20), nullable=False, index=True)
    signal_type = Column(String(20), nullable=False)  # buy, sell, hold
    strength = Column(Float, nullable=False)  # Signal strength 0-1
    confidence = Column(Float, nullable=False)  # AI confidence 0-1

    # Price information at signal time
    current_price = Column(Float, nullable=False)
    target_price = Column(Float)
    stop_loss_price = Column(Float)
    expected_return = Column(Float)

    # Signal metadata
    reasoning = Column(Text)  # Why this signal was generated
    indicators_used = Column(Text)  # JSON of indicators and their values
    market_conditions = Column(Text)  # JSON of market condition assessment

    # Risk assessment
    risk_score = Column(Float)  # Risk assessment 0-1
    position_size_recommendation = Column(Float)  # Recommended position size
    holding_period_estimate = Column(Integer)  # Estimated holding period in days

    # Execution tracking
    is_executed = Column(Boolean, default=False)
    execution_price = Column(Float)
    execution_time = Column(DateTime(timezone=True))
    execution_notes = Column(Text)

    # Performance tracking
    realized_return = Column(Float)
    holding_period_actual = Column(Integer)
    outcome = Column(String(20))  # win, loss, breakeven, not_executed

    # Timestamps
    generated_at = Column(DateTime(timezone=True), nullable=False, index=True)
    expires_at = Column(DateTime(timezone=True))
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # Relationship
    strategy = relationship("Strategy", back_populates="signals")

    def __repr__(self):
        return f"<Signal(id={self.id}, symbol='{self.symbol}', type={self.signal_type}, strength={self.strength})>"


class StrategyPerformance(Base):
    """Daily performance tracking for strategies"""
    __tablename__ = "strategy_performance"

    id = Column(Integer, primary_key=True, index=True)
    strategy_id = Column(Integer, ForeignKey("strategies.id"), nullable=False)

    # Date
    date = Column(DateTime(timezone=True), nullable=False, index=True)

    # Performance metrics
    daily_pnl = Column(Float, default=0.0)
    daily_return_percent = Column(Float, default=0.0)
    cumulative_pnl = Column(Float, default=0.0)
    cumulative_return_percent = Column(Float, default=0.0)

    # Position metrics
    active_positions = Column(Integer, default=0)
    total_exposure = Column(Float, default=0.0)
    cash_utilized = Column(Float, default=0.0)

    # Trading activity
    signals_generated = Column(Integer, default=0)
    trades_executed = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)

    # Risk metrics
    portfolio_value = Column(Float, nullable=False)
    drawdown = Column(Float, default=0.0)
    volatility = Column(Float, default=0.0)
    var_95 = Column(Float, default=0.0)  # Value at Risk 95%

    # Benchmark comparison
    benchmark_return = Column(Float, default=0.0)
    alpha = Column(Float, default=0.0)
    beta = Column(Float, default=1.0)

    # Market correlation
    market_correlation = Column(Float, default=0.0)
    sector_correlation = Column(Float, default=0.0)

    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # Relationship
    strategy = relationship("Strategy")

    def __repr__(self):
        return f"<StrategyPerformance(strategy_id={self.strategy_id}, date={self.date}, pnl={self.daily_pnl})>"