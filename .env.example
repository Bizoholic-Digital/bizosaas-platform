# Bizoholic SaaS Platform - Environment Configuration (Shared Infrastructure)
# Copy this file to .env and fill in your actual values

# =============================================================================
# SHARED INFRASTRUCTURE CONNECTION
# =============================================================================

# Shared PostgreSQL Database (shared-postgres-dev at localhost:5432)
# The bizoholic database is already created in the shared infrastructure
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=bizoholic
POSTGRES_USER=bizoholic
POSTGRES_PASSWORD=your_postgres_password_here

# WordPress Database (uses same shared PostgreSQL)
WORDPRESS_DB_NAME=wordpress_bizoholic
WORDPRESS_DB_USER=wordpress
WORDPRESS_DB_PASSWORD=your_wordpress_db_password_here

# Shared Redis (shared-redis-dev at localhost:6379)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=1

# Shared n8n (shared-n8n-dev at localhost:5678)
# n8n is provided by shared infrastructure, no local instance needed

# JWT Configuration for CrewAI and Auth Service
JWT_SECRET=your_jwt_secret_key_minimum_32_characters_long

# =============================================================================
# AI SERVICES CONFIGURATION
# =============================================================================

# OpenAI API
OPENAI_API_KEY=sk-your_openai_api_key_here

# Anthropic Claude API (optional)
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# LangChain
LANGCHAIN_API_KEY=your_langchain_api_key_here

# =============================================================================
# ADVERTISING PLATFORM APIs
# =============================================================================

# Google Ads API
GOOGLE_ADS_DEVELOPER_TOKEN=your_google_ads_developer_token
GOOGLE_ADS_CLIENT_ID=your_google_ads_client_id
GOOGLE_ADS_CLIENT_SECRET=your_google_ads_client_secret

# Meta Ads (Facebook/Instagram) API
META_ACCESS_TOKEN=your_meta_access_token

# LinkedIn Marketing API
LINKEDIN_API_KEY=your_linkedin_api_key

# =============================================================================
# PAYMENT & BILLING
# =============================================================================

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret

# =============================================================================
# EMAIL SERVICE
# =============================================================================

# SMTP Configuration
SMTP_HOST=smtp.resend.com
SMTP_PORT=587
SMTP_USER=resend
SMTP_PASS=your_resend_api_key_here
SMTP_ADMIN_EMAIL=admin@yourdomain.com

# =============================================================================
# AUTHENTICATION SERVICE CONFIGURATION
# =============================================================================

# Auth Service Database Configuration (uses shared PostgreSQL)
AUTH_DATABASE_URL=postgresql://admin:${POSTGRES_PASSWORD}@localhost:5432/bizosaas

# Auth Service JWT Configuration
AUTH_JWT_SECRET=${JWT_SECRET}
AUTH_JWT_EXPIRES_IN=24h
AUTH_SESSION_TIMEOUT=24

# Auth Service Security Configuration
AUTH_BCRYPT_ROUNDS=12
AUTH_MAX_LOGIN_ATTEMPTS=5
AUTH_LOCKOUT_DURATION=900

# Auth Service CORS Configuration
AUTH_CORS_ORIGINS=http://localhost:3000,http://localhost:3002,http://localhost:8006,http://localhost:8007

# =============================================================================
# EXTERNAL APIS & TOOLS
# =============================================================================

# SERP API (for search engine results)
SERP_API_KEY=your_serp_api_key_here

# Screaming Frog API (for SEO analysis)
SCREAMING_FROG_API_KEY=your_screaming_frog_api_key

# =============================================================================
# SEARCH & MONITORING
# =============================================================================

# MeiliSearch
MEILISEARCH_MASTER_KEY=your_meilisearch_master_key_here

# Grafana
GRAFANA_PASSWORD=your_grafana_admin_password

# =============================================================================
# SSL & DOMAIN CONFIGURATION
# =============================================================================

# Let's Encrypt Email for SSL certificates
ACME_EMAIL=admin@yourdomain.com

# Production Domain (when deploying)
PRODUCTION_DOMAIN=yourdomain.com

# =============================================================================
# STRAPI CMS CONFIGURATION
# =============================================================================

# Strapi Database Configuration (uses shared PostgreSQL)
STRAPI_DATABASE_CLIENT=postgres
STRAPI_DATABASE_HOST=localhost
STRAPI_DATABASE_PORT=5432
STRAPI_DATABASE_NAME=bizoholic
STRAPI_DATABASE_USERNAME=bizoholic
STRAPI_DATABASE_PASSWORD=your_postgres_password_here
STRAPI_DATABASE_SCHEMA=strapi
STRAPI_DATABASE_SSL=false

# Strapi Application Configuration
STRAPI_APP_KEYS=your_strapi_app_key1,your_strapi_app_key2,your_strapi_app_key3,your_strapi_app_key4
STRAPI_API_TOKEN_SALT=your_strapi_api_token_salt_here
STRAPI_ADMIN_JWT_SECRET=your_strapi_admin_jwt_secret_here
STRAPI_TRANSFER_TOKEN_SALT=your_strapi_transfer_token_salt_here
STRAPI_JWT_SECRET=your_strapi_jwt_secret_here

# Strapi Admin Configuration
STRAPI_HOST=0.0.0.0
STRAPI_PORT=1337
STRAPI_ADMIN_URL=http://localhost:1337/admin
STRAPI_PUBLIC_URL=http://localhost:1337

# Strapi Multi-tenant Configuration
STRAPI_TENANT_HEADER=x-tenant-id
STRAPI_DEFAULT_TENANT=default

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# Next.js Configuration
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_nextauth_secret_here

# App URLs
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_STRAPI_URL=http://localhost:1337

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Environment
NODE_ENV=development

# Debug Settings
DEBUG=true
LOG_LEVEL=INFO

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Encryption Keys (generate with: openssl rand -base64 32)
ENCRYPTION_KEY=your_32_character_encryption_key_here
SESSION_SECRET=your_session_secret_key_here

# CORS Origins (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:5678,http://localhost:8000

# =============================================================================
# OPTIONAL INTEGRATIONS
# =============================================================================

# CRM Integration
HUBSPOT_API_KEY=your_hubspot_api_key
PIPEDRIVE_API_KEY=your_pipedrive_api_key

# Analytics
GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# Monitoring & Error Tracking
SENTRY_DSN=your_sentry_dsn_here

# =============================================================================
# SHARED INFRASTRUCTURE NOTES
# =============================================================================

# This project now uses shared development infrastructure:
# - PostgreSQL: shared-postgres-dev (localhost:5432) with bizoholic database
# - Redis: shared-redis-dev (localhost:6379)
# - n8n: shared-n8n-dev (localhost:5678)
# - Network: shared-dev-network

# Required services to start before running this project:
# 1. cd /home/alagiri/projects/shared-development
# 2. docker-compose up -d

# =============================================================================
# QUICK START FOR SHARED INFRASTRUCTURE
# =============================================================================

# Minimum required for local development with shared infrastructure:
# - POSTGRES_PASSWORD (must match shared infrastructure)
# - JWT_SECRET 
# - OPENAI_API_KEY
# - WORDPRESS_DB_PASSWORD

# To get started:
# 1. Ensure shared infrastructure is running
# 2. Copy this file: cp .env.example .env
# 3. Fill in the required values above
# 4. Run: npm run dev:project