version: '3.8'

# BizOSaaS Infrastructure Project - PRODUCTION Environment
# 6 Infrastructure containers for production deployment
# Optimized ports to avoid conflicts with staging

services:
  # ==========================================
  # POSTGRESQL DATABASE
  # Multi-tenant database with pgvector - PRODUCTION
  # ==========================================
  postgres:
    image: pgvector/pgvector:pg16
    container_name: bizosaas-postgres-production
    ports:
      - "5132:5432"  # Different port from staging (5432)
    environment:
      - POSTGRES_DB=bizosaas_production
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=BizOSaaS2025!ProductionDB#Secure
      - POSTGRES_MULTIPLE_DATABASES=bizosaas_production,saleor_production,temporal_production,vault_production
    volumes:
      - postgres_production_data:/var/lib/postgresql/data
      - ./database/init-scripts/01-create-databases.sql:/docker-entrypoint-initdb.d/init-multiple-dbs.sh:ro
    networks:
      - bizosaas-production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d bizosaas_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # REDIS CACHE
  # High-performance caching and sessions - PRODUCTION
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: bizosaas-redis-production
    ports:
      - "6179:6379"  # Different port from staging (6379)
    command: redis-server --appendonly yes --replica-read-only no --requirepass BizOSaaS2025!ProdRedis
    volumes:
      - redis_production_data:/data
    networks:
      - bizosaas-production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "BizOSaaS2025!ProdRedis", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # HASHICORP VAULT
  # Secrets management - PRODUCTION
  # ==========================================
  vault:
    image: hashicorp/vault:1.15
    container_name: bizosaas-vault-production
    ports:
      - "8100:8200"  # Different port from staging (8200)
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=production-root-token-bizosaas-2025-secure
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_production_data:/vault/data
    networks:
      - bizosaas-production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # TEMPORAL SERVER
  # Workflow orchestration engine - PRODUCTION
  # ==========================================
  temporal-server:
    image: temporalio/auto-setup:1.22.0
    container_name: bizosaas-temporal-server-production
    ports:
      - "7133:7233"  # Different port from staging (7233)
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PWD=BizOSaaS2025!ProductionDB#Secure
      - POSTGRES_SEEDS=bizosaas-postgres-production
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/production.yaml
    volumes:
      - temporal_production_data:/etc/temporal/config/dynamicconfig
    networks:
      - bizosaas-production-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "tctl", "--address", "bizosaas-temporal-server-production:7233", "workflow", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # TEMPORAL UI
  # Workflow management interface - PRODUCTION
  # ==========================================
  temporal-ui:
    image: temporalio/ui:2.21.0
    container_name: bizosaas-temporal-ui-production
    ports:
      - "8182:8080"  # Different port from staging (8082)
    environment:
      - TEMPORAL_ADDRESS=bizosaas-temporal-server-production:7233
      - TEMPORAL_CORS_ORIGINS=https://bizoholic.com,https://coreldove.com,https://thrillring.com
    networks:
      - bizosaas-production-network
    restart: unless-stopped
    depends_on:
      temporal-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # TEMPORAL INTEGRATION SERVICE
  # Custom workflow integration - PRODUCTION
  # ==========================================
  temporal-integration:
    build:
      context: https://github.com/Bizoholic-Digital/bizosaas-platform.git#main
      dockerfile: backend/services/temporal/Dockerfile
    container_name: bizosaas-temporal-integration-production
    ports:
      - "8109:8009"  # Different port from staging (8009)
    environment:
      - NODE_ENV=production
      - TEMPORAL_ADDRESS=bizosaas-temporal-server-production:7233
      - POSTGRES_URL=postgresql://admin:BizOSaaS2025!ProductionDB#Secure@bizosaas-postgres-production:5432/temporal_production
      - REDIS_URL=redis://:BizOSaaS2025!ProdRedis@bizosaas-redis-production:6379/0
    networks:
      - bizosaas-production-network
    restart: unless-stopped
    depends_on:
      temporal-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_production_data:
    driver: local
  redis_production_data:
    driver: local
  vault_production_data:
    driver: local
  temporal_production_data:
    driver: local

networks:
  bizosaas-production-network:
    driver: bridge
    external: false

# ==================================================
# PRODUCTION INFRASTRUCTURE PROJECT SUMMARY:
# ==================================================
# Container Count: 6
# Environment: Production
# Security: Enhanced passwords and tokens
# Ports: Offset by +100 from staging (avoid conflicts)
# Dependencies: None (foundation layer)
# External Access: Limited to essential services only
# ==================================================