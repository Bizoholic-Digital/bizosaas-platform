name: Deploy CoreLDove Platform

on:
  push:
    branches: [main, staging]
    paths:
      - 'coreldove-platform/**'
      - 'shared/frontend/**'
      - '.github/workflows/deploy-coreldove.yml'
  workflow_dispatch:

env:
  DOKPLOY_URL: ${{ secrets.DOKPLOY_URL }}
  DOKPLOY_TOKEN: ${{ secrets.DOKPLOY_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci
        env:
          NEXT_PUBLIC_PLATFORM: coreldove

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_PLATFORM: coreldove
          NODE_ENV: production

      - name: Test MedusaJS backend
        run: |
          cd services/medusa-coreldove
          npm ci
          npm run build
          npm run test

      - name: Run linting
        run: |
          cd frontend
          npm run lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DOKPLOY_CORELDOVE_PROD_ID }}" >> $GITHUB_ENV
            echo "DOMAIN_SUFFIX=${{ secrets.PROD_DOMAIN }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DOKPLOY_CORELDOVE_STAGING_ID }}" >> $GITHUB_ENV
            echo "DOMAIN_SUFFIX=${{ secrets.STAGING_DOMAIN }}" >> $GITHUB_ENV
          fi

      - name: Deploy to Dokploy
        run: |
          curl -X POST \
            "${{ env.DOKPLOY_URL }}/api/projects/${{ env.PROJECT_ID }}/deploy" \
            -H "Authorization: Bearer ${{ env.DOKPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "buildArgs": {
                "ENVIRONMENT": "${{ env.ENVIRONMENT }}",
                "NEXT_PUBLIC_PLATFORM": "coreldove",
                "DOMAIN_SUFFIX": "${{ env.DOMAIN_SUFFIX }}"
              }
            }'

      - name: Wait for deployment
        run: |
          echo "Waiting for CoreLDove platform deployment to complete..."
          sleep 120  # E-commerce backend takes longer
          
          STATUS=$(curl -s \
            "${{ env.DOKPLOY_URL }}/api/projects/${{ env.PROJECT_ID }}/status" \
            -H "Authorization: Bearer ${{ env.DOKPLOY_TOKEN }}" | \
            jq -r '.status')
          
          if [[ "$STATUS" == "running" ]]; then
            echo "✅ CoreLDove platform deployment successful"
          else
            echo "❌ CoreLDove platform deployment failed"
            exit 1
          fi

      - name: Health check
        run: |
          echo "Testing CoreLDove platform health..."
          
          BASE_URL="https://coreldove.${{ env.DOMAIN_SUFFIX }}"
          STORE_URL="https://store.coreldove.${{ env.DOMAIN_SUFFIX }}"
          
          # Test main homepage
          if curl -f "$BASE_URL" -o /dev/null -s; then
            echo "✅ Homepage accessible"
          else
            echo "❌ Homepage not accessible"
            exit 1
          fi
          
          # Test MedusaJS backend
          if curl -f "$STORE_URL/health" -o /dev/null -s; then
            echo "✅ MedusaJS backend health check passed"
          else
            echo "⚠️  MedusaJS backend health check failed (may still be starting)"
          fi
          
          # Test store endpoints
          if curl -f "$STORE_URL/store/products" -H "Accept: application/json" -o /dev/null -s; then
            echo "✅ Store API accessible"
          else
            echo "⚠️  Store API not accessible (may still be starting)"
          fi

      - name: Run smoke tests
        run: |
          echo "Running smoke tests for CoreLDove platform..."
          
          BASE_URL="https://coreldove.${{ env.DOMAIN_SUFFIX }}"
          
          # Test platform detection and content
          RESPONSE=$(curl -s "$BASE_URL" | grep -c "Source. Process. Profit." || echo "0")
          if [[ "$RESPONSE" -gt "0" ]]; then
            echo "✅ Platform detection working - CoreLDove content loaded"
          else
            echo "❌ Platform detection failed - wrong content or error"
            exit 1
          fi
          
          # Test e-commerce specific elements
          ECOMMERCE_RESPONSE=$(curl -s "$BASE_URL" | grep -c "dropshipping\|e-commerce\|marketplace" || echo "0")
          if [[ "$ECOMMERCE_RESPONSE" -gt "0" ]]; then
            echo "✅ E-commerce content detected"
          else
            echo "⚠️  E-commerce content not found"
          fi

      - name: Test product integration
        run: |
          echo "Testing product integration..."
          
          STORE_URL="https://store.coreldove.${{ env.DOMAIN_SUFFIX }}"
          
          # Test products endpoint
          PRODUCTS=$(curl -s "$STORE_URL/store/products" -H "Accept: application/json" | jq -r '.products | length' 2>/dev/null || echo "0")
          
          if [[ "$PRODUCTS" -gt "0" ]]; then
            echo "✅ Products found: $PRODUCTS"
          else
            echo "ℹ️  No products found (expected for fresh deployment)"
          fi

      - name: Notify deployment
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🚀 CoreLDove platform deployment completed successfully"
            echo "🌐 Frontend: https://coreldove.${{ env.DOMAIN_SUFFIX }}"
            echo "🛒 Store API: https://store.coreldove.${{ env.DOMAIN_SUFFIX }}"
          else
            echo "💥 CoreLDove platform deployment failed"
          fi