name: Build and Push to GHCR

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/**'
      - 'quanttrade/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - staging

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/bizoholic-digital/bizosaas

jobs:
  # ==========================================
  # DETECT CHANGES
  # ==========================================
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      quanttrade: ${{ steps.filter.outputs.quanttrade }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            infrastructure:
              - 'infrastructure/**'
            quanttrade:
              - 'quanttrade/**'

  # ==========================================
  # BUILD FRONTEND SERVICES
  # ==========================================
  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: bizoholic-frontend
            path: frontend/apps/bizoholic-frontend
          - name: thrillring-gaming
            path: frontend/apps/thrillring-gaming
          - name: coreldove-frontend
            path: frontend/apps/coreldove-frontend
          - name: client-portal
            path: frontend/apps/client-portal
          - name: admin-dashboard
            path: frontend/apps/bizosaas-admin
          - name: business-directory-frontend
            path: frontend/apps/business-directory

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}
            type=raw,value=production,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # BUILD BACKEND SERVICES
  # ==========================================
  build-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: brain-gateway
            path: backend/services/brain-gateway
          - name: ai-agents
            path: backend/services/ai-agents
          - name: auth-service
            path: backend/services/auth
          - name: wagtail-cms
            path: backend/services/cms/wagtail
          - name: django-crm
            path: backend/services/crm/django-crm
          - name: coreldove-backend
            path: backend/services/ecommerce/coreldove-backend
          - name: amazon-sourcing
            path: backend/services/sourcing/amazon-sourcing
          - name: business-directory-backend
            path: backend/services/directory/business-directory-backend

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}
            type=raw,value=production,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # BUILD QUANTTRADE SERVICE
  # ==========================================
  build-quanttrade:
    needs: detect-changes
    if: needs.detect-changes.outputs.quanttrade == 'true'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-quanttrade-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}
            type=raw,value=production,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push QuantTrade Backend
        uses: docker/build-push-action@v5
        with:
          context: ./quanttrade/backend
          file: ./quanttrade/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # BUILD INFRASTRUCTURE SERVICES
  # ==========================================
  build-infrastructure:
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: superset
            path: infrastructure/analytics/apache-superset

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}
            type=raw,value=production,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
