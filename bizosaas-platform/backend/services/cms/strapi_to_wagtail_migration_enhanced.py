#!/usr/bin/env python3
"""
Enhanced Strapi to Wagtail CMS Migration Script for BizOSaaS Platform

This script provides a comprehensive migration from Strapi CMS to Wagtail CMS with:
- Multi-tenant content migration
- AI agent integration setup
- Content workflow management
- Media file migration
- API endpoint configuration
"""

import os
import sys
import json
import psycopg2
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional
import logging
from pathlib import Path

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migration.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class EnhancedStrapiToWagtailMigrator:
    """Enhanced migrator with full feature support"""
    
    def __init__(self, 
                 postgres_host='localhost',
                 postgres_port=5432,
                 postgres_db='bizosaas_platform', 
                 postgres_user='postgres',
                 postgres_password='devpassword123',
                 strapi_url='http://localhost:1337',
                 wagtail_url='http://localhost:8000'):
        
        self.postgres_config = {
            'host': postgres_host,
            'port': postgres_port,
            'database': postgres_db,
            'user': postgres_user,
            'password': postgres_password
        }
        
        self.strapi_url = strapi_url
        self.wagtail_url = wagtail_url
        self.db_connection = None
        
        # Migration tracking
        self.migration_stats = {
            'tenants_created': 0,
            'pages_migrated': 0,
            'media_files_migrated': 0,
            'snippets_created': 0,
            'errors': []
        }
        
    def connect_db(self) -> bool:
        """Connect to PostgreSQL database"""
        try:
            self.db_connection = psycopg2.connect(**self.postgres_config)
            logger.info("✅ Connected to PostgreSQL database")
            return True
        except Exception as e:
            logger.error(f"❌ Failed to connect to database: {e}")
            return False
            
    def close_db(self):
        """Close database connection"""
        if self.db_connection:
            self.db_connection.close()
            logger.info("✅ Database connection closed")

    def fetch_strapi_content(self, content_type: str, tenant_filter: str = None) -> List[Dict]:
        """Fetch content from Strapi API with enhanced error handling"""
        try:
            # Build API URL
            url = f"{self.strapi_url}/api/{content_type}"
            params = {'populate': '*'}
            
            if tenant_filter:
                params['filters[tenant][$eq]'] = tenant_filter
                
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get('data', [])
                logger.info(f"✅ Fetched {len(items)} {content_type} items from Strapi API")
                return items
            else:
                logger.warning(f"⚠️ Strapi API returned status {response.status_code} for {content_type}")
                
        except requests.exceptions.RequestException as e:
            logger.warning(f"⚠️ Could not fetch from Strapi API: {e}")
        except Exception as e:
            logger.error(f"❌ Unexpected error fetching Strapi content: {e}")
        
        # Fallback to database query
        return self.fetch_from_database(content_type, tenant_filter)
    
    def fetch_from_database(self, content_type: str, tenant_filter: str = None) -> List[Dict]:
        """Fetch content directly from database with enhanced querying"""
        if not self.db_connection:
            logger.error("❌ No database connection")
            return []
        
        # Enhanced table mapping for Strapi content types
        table_mapping = {
            'articles': 'articles',
            'blog-posts': 'blog_posts', 
            'services': 'services',
            'pages': 'pages',
            'case-studies': 'case_studies',
            'team-members': 'team_members',
            'testimonials': 'testimonials',
            'landing-pages': 'landing_pages',
            'faqs': 'faqs'
        }
        
        table_name = table_mapping.get(content_type, content_type.replace('-', '_'))
        
        try:
            cursor = self.db_connection.cursor()
            
            # Build query with tenant filtering
            base_query = f"SELECT * FROM {table_name}"
            params = []
            
            if tenant_filter:
                base_query += " WHERE tenant = %s OR tenant = 'both' OR tenant IS NULL"
                params.append(tenant_filter)
            
            cursor.execute(base_query, params)
            
            columns = [desc[0] for desc in cursor.description]
            rows = cursor.fetchall()
            
            # Convert to list of dicts
            result = []
            for row in rows:
                result.append(dict(zip(columns, row)))
            
            logger.info(f"✅ Fetched {len(result)} {content_type} items from database")
            return result
            
        except Exception as e:
            logger.error(f"❌ Database query failed for {content_type}: {e}")
            return []

    def create_enhanced_sample_content(self) -> Dict[str, List[Dict]]:
        """Create comprehensive sample content for all content types"""
        return {
            'tenants': [
                {
                    'name': 'Bizoholic',
                    'domain': 'bizoholic.com',
                    'subdomain': 'bizoholic',
                    'bizosaas_tenant_id': 'bizoholic-main',
                    'is_active': True,
                    'api_settings': {
                        'ai_enabled': True,
                        'content_automation': True,
                        'workflow_approval': False
                    }
                },
                {
                    'name': 'Coreldove',
                    'domain': 'coreldove.com', 
                    'subdomain': 'coreldove',
                    'bizosaas_tenant_id': 'coreldove-main',
                    'is_active': True,
                    'api_settings': {
                        'ai_enabled': True,
                        'content_automation': True,
                        'workflow_approval': True
                    }
                }
            ],
            'content_pages': [
                {
                    'title': 'The Future of Digital Marketing with AI',
                    'slug': 'future-digital-marketing-ai',
                    'author': 'Marketing Team',
                    'excerpt': 'Discover how AI is transforming digital marketing strategies and customer engagement.',
                    'keywords': 'AI, digital marketing, automation, customer engagement',
                    'reading_time': 8,
                    'publish_date': '2025-01-15',
                    'tenant': 'bizoholic-main',
                    'body_content': [
                        {
                            'type': 'heading',
                            'value': 'Introduction to AI in Marketing'
                        },\n                        {\n                            'type': 'paragraph',\n                            'value': 'Artificial Intelligence is revolutionizing how businesses approach marketing...'\n                        },\n                        {\n                            'type': 'cta',\n                            'value': {\n                                'title': 'Ready to Transform Your Marketing?',\n                                'description': 'Let our AI-powered strategies boost your ROI',\n                                'button_text': 'Get Started Today',\n                                'button_url': '/contact',\n                                'button_style': 'primary'\n                            }\n                        }\n                    ]\n                },\n                {\n                    'title': 'SEO Best Practices for E-commerce Success',\n                    'slug': 'seo-best-practices-ecommerce',\n                    'author': 'SEO Specialist',\n                    'excerpt': 'Complete guide to optimizing your e-commerce site for search engines.',\n                    'keywords': 'SEO, e-commerce, search optimization, product pages',\n                    'reading_time': 12,\n                    'publish_date': '2025-01-10',\n                    'tenant': 'bizoholic-main',\n                    'body_content': [\n                        {\n                            'type': 'heading',\n                            'value': 'E-commerce SEO Fundamentals'\n                        },\n                        {\n                            'type': 'paragraph',\n                            'value': 'E-commerce SEO requires a strategic approach to product optimization...'\n                        }\n                    ]\n                }\n            ],\n            'service_pages': [\n                {\n                    'title': 'AI-Powered Digital Marketing Strategy',\n                    'slug': 'ai-digital-marketing-strategy',\n                    'service_description': 'Comprehensive AI-driven marketing strategy development and implementation.',\n                    'icon': 'ai-strategy-icon',\n                    'badge': 'AI-Powered',\n                    'category': 'Strategy',\n                    'featured': True,\n                    'order': 1,\n                    'tenant': 'bizoholic-main',\n                    'price_data': {\n                        'starting_at': 3500,\n                        'currency': 'USD',\n                        'billing': 'monthly',\n                        'features': [\n                            'AI-driven market analysis',\n                            'Automated campaign optimization',\n                            'Real-time performance monitoring',\n                            'Predictive analytics reporting'\n                        ]\n                    },\n                    'content_blocks': [\n                        {\n                            'type': 'features',\n                            'value': [\n                                {\n                                    'title': 'Smart Audience Targeting',\n                                    'description': 'AI algorithms identify and target your ideal customers',\n                                    'icon': 'target-icon'\n                                },\n                                {\n                                    'title': 'Campaign Automation',\n                                    'description': 'Automated A/B testing and optimization across all channels',\n                                    'icon': 'automation-icon'\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    'title': 'Advanced SEO & Content Marketing',\n                    'slug': 'advanced-seo-content-marketing',\n                    'service_description': 'Data-driven SEO strategies combined with AI-generated content marketing.',\n                    'icon': 'seo-content-icon',\n                    'badge': 'Results Guaranteed',\n                    'category': 'SEO',\n                    'featured': True,\n                    'order': 2,\n                    'tenant': 'bizoholic-main',\n                    'price_data': {\n                        'starting_at': 2500,\n                        'currency': 'USD',\n                        'billing': 'monthly',\n                        'features': [\n                            'Technical SEO audit',\n                            'AI content generation',\n                            'Link building campaigns',\n                            'Performance tracking'\n                        ]\n                    }\n                }\n            ],\n            'landing_pages': [\n                {\n                    'title': 'Transform Your Business with AI Marketing',\n                    'slug': 'ai-marketing-transformation',\n                    'subtitle': 'Increase ROI by 300% with our proven AI-powered marketing strategies',\n                    'variant_name': 'A',\n                    'is_control': True,\n                    'campaign_id': 'ai-marketing-2025',\n                    'tenant': 'bizoholic-main',\n                    'conversion_goals': ['lead_generation', 'consultation_booking'],\n                    'content_blocks': [\n                        {\n                            'type': 'cta',\n                            'value': {\n                                'title': 'Get Your Free AI Marketing Audit',\n                                'description': 'Discover how AI can transform your marketing results',\n                                'button_text': 'Get Free Audit',\n                                'button_url': '/audit-request',\n                                'button_style': 'primary'\n                            }\n                        },\n                        {\n                            'type': 'stats',\n                            'value': [\n                                {\n                                    'stat_number': '300%',\n                                    'stat_label': 'Average ROI Increase',\n                                    'stat_description': 'Our clients see dramatic ROI improvements'\n                                },\n                                {\n                                    'stat_number': '85%',\n                                    'stat_label': 'Lead Quality Improvement',\n                                    'stat_description': 'Better qualified leads through AI targeting'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            'team_members': [\n                {\n                    'name': 'Sarah Johnson',\n                    'position': 'AI Marketing Director',\n                    'bio': 'Sarah leads our AI marketing initiatives with over 10 years of experience in digital marketing and machine learning.',\n                    'email': 'sarah@bizoholic.com',\n                    'linkedin': 'https://linkedin.com/in/sarahjohnson',\n                    'tenant': 'bizoholic-main'\n                },\n                {\n                    'name': 'Michael Chen',\n                    'position': 'Senior SEO Strategist',\n                    'bio': 'Michael specializes in technical SEO and has helped over 200 businesses improve their search rankings.',\n                    'email': 'michael@bizoholic.com',\n                    'linkedin': 'https://linkedin.com/in/michaelchen',\n                    'tenant': 'bizoholic-main'\n                }\n            ],\n            'testimonials': [\n                {\n                    'client_name': 'John Smith',\n                    'company': 'TechCorp Inc.',\n                    'position': 'CEO',\n                    'testimonial': 'Bizoholic transformed our marketing completely. The AI-powered campaigns delivered results we never thought possible.',\n                    'rating': 5,\n                    'featured': True,\n                    'tenant': 'bizoholic-main'\n                },\n                {\n                    'client_name': 'Emily Rodriguez',\n                    'company': 'GreenStart Solutions',\n                    'position': 'Marketing Director',\n                    'testimonial': 'The SEO strategies and content marketing approach increased our organic traffic by 400% in just 6 months.',\n                    'rating': 5,\n                    'featured': True,\n                    'tenant': 'bizoholic-main'\n                }\n            ],\n            'faq_pages': [\n                {\n                    'title': 'Frequently Asked Questions',\n                    'slug': 'faq',\n                    'category': 'General',\n                    'tenant': 'bizoholic-main',\n                    'faq_content': [\n                        {\n                            'type': 'faq_section',\n                            'value': {\n                                'section_title': 'AI Marketing Services',\n                                'faqs': [\n                                    {\n                                        'question': 'How does AI improve marketing ROI?',\n                                        'answer': 'AI analyzes vast amounts of data to optimize targeting, personalization, and campaign timing, typically resulting in 200-400% ROI improvements.'\n                                    },\n                                    {\n                                        'question': 'What AI tools do you use?',\n                                        'answer': 'We use a combination of proprietary AI algorithms and leading platforms like GPT-4, Claude, and custom machine learning models.'\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ],\n            'ai_content_templates': [\n                {\n                    'name': 'Blog Post - AI Marketing',\n                    'content_type': 'blog_post',\n                    'tenant': 'bizoholic-main',\n                    'ai_prompt': 'Write a comprehensive blog post about {topic} focusing on {industry} businesses. Include actionable tips and real-world examples.',\n                    'template_content': '# {title}\\n\\n{introduction}\\n\\n## Key Benefits\\n\\n{benefits}\\n\\n## Implementation Steps\\n\\n{steps}\\n\\n## Conclusion\\n\\n{conclusion}',\n                    'variables': {\n                        'topic': 'string',\n                        'industry': 'string', \n                        'title': 'string',\n                        'introduction': 'text',\n                        'benefits': 'list',\n                        'steps': 'list',\n                        'conclusion': 'text'\n                    }\n                }\n            ]\n        }\n    \n    def create_wagtail_migration_script(self, content_data: Dict[str, List[Dict]]) -> str:\n        \"\"\"Create a comprehensive Django management script for Wagtail content creation\"\"\"\n        \n        script_content = f'''\n#!/usr/bin/env python3\n\"\"\"\nWagtail Content Migration Script\nGenerated on: {datetime.now().isoformat()}\n\"\"\"\n\nimport os\nimport django\nimport json\nfrom datetime import datetime, date\nfrom django.contrib.auth import get_user_model\n\n# Setup Django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wagtail_cms.settings.development')\ndjango.setup()\n\nfrom wagtail.models import Site, Page\nfrom wagtail.images.models import Image\nfrom cms.models import (\n    Tenant, LandingPage, CampaignPage, ContentPage, ServicePage,\n    TeamMember, ClientTestimonial, FAQPage, AIContentTemplate\n)\n\nUser = get_user_model()\n\ndef create_or_get_superuser():\n    \"\"\"Create or get superuser for page creation\"\"\"\n    try:\n        user = User.objects.get(is_superuser=True)\n        return user\n    except User.DoesNotExist:\n        user = User.objects.create_superuser(\n            username='admin',\n            email='admin@bizoholic.com',\n            password='admin123'\n        )\n        print(f\"✅ Created superuser: {{user.username}}\")\n        return user\n\ndef get_or_create_root_page():\n    \"\"\"Get or create root page for content\"\"\"\n    try:\n        site = Site.objects.get(is_default_site=True)\n        root_page = site.root_page\n        return root_page\n    except Site.DoesNotExist:\n        root_page = Page.objects.first()\n        if not root_page:\n            print(\"❌ No root page found\")\n            return None\n        return root_page\n\ndef create_tenants():\n    \"\"\"Create tenant records\"\"\"\n    tenants_data = {json.dumps(content_data.get('tenants', []), indent=2)}\n    \n    created_tenants = {{}}\n    \n    for tenant_data in tenants_data:\n        tenant, created = Tenant.objects.get_or_create(\n            bizosaas_tenant_id=tenant_data['bizosaas_tenant_id'],\n            defaults={{\n                'name': tenant_data['name'],\n                'domain': tenant_data['domain'],\n                'subdomain': tenant_data['subdomain'],\n                'is_active': tenant_data['is_active'],\n                'api_settings': tenant_data['api_settings']\n            }}\n        )\n        \n        created_tenants[tenant_data['bizosaas_tenant_id']] = tenant\n        \n        if created:\n            print(f\"✅ Created tenant: {{tenant.name}}\")\n        else:\n            print(f\"ℹ️  Tenant already exists: {{tenant.name}}\")\n    \n    return created_tenants\n\ndef create_content_pages(tenants):\n    \"\"\"Create content pages (blog posts)\"\"\"\n    content_pages_data = {json.dumps(content_data.get('content_pages', []), indent=2)}\n    \n    root_page = get_or_create_root_page()\n    if not root_page:\n        return\n    \n    for page_data in content_pages_data:\n        try:\n            tenant = tenants.get(page_data['tenant'])\n            if not tenant:\n                print(f\"⚠️  Tenant not found for page: {{page_data['title']}}\")\n                continue\n            \n            # Check if page already exists\n            existing_page = ContentPage.objects.filter(\n                slug=page_data['slug'],\n                tenant=tenant\n            ).first()\n            \n            if existing_page:\n                print(f\"ℹ️  Content page already exists: {{page_data['title']}}\")\n                continue\n            \n            # Create content page\n            content_page = ContentPage(\n                title=page_data['title'],\n                slug=page_data['slug'],\n                author=page_data.get('author', ''),\n                excerpt=page_data.get('excerpt', ''),\n                keywords=page_data.get('keywords', ''),\n                reading_time=page_data.get('reading_time', 5),\n                tenant=tenant\n            )\n            \n            # Set publish date if provided\n            if page_data.get('publish_date'):\n                try:\n                    content_page.publish_date = datetime.strptime(\n                        page_data['publish_date'], '%Y-%m-%d'\n                    )\n                except ValueError:\n                    pass\n            \n            # Add StreamField content if provided\n            if page_data.get('body_content'):\n                content_page.body = page_data['body_content']\n            \n            root_page.add_child(instance=content_page)\n            revision = content_page.save_revision()\n            revision.publish()\n            \n            print(f\"✅ Created content page: {{page_data['title']}}\")\n            \n        except Exception as e:\n            print(f\"❌ Failed to create content page {{page_data['title']}}: {{e}}\")\n\ndef create_service_pages(tenants):\n    \"\"\"Create service pages\"\"\"\n    service_pages_data = {json.dumps(content_data.get('service_pages', []), indent=2)}\n    \n    root_page = get_or_create_root_page()\n    if not root_page:\n        return\n    \n    for page_data in service_pages_data:\n        try:\n            tenant = tenants.get(page_data['tenant'])\n            if not tenant:\n                print(f\"⚠️  Tenant not found for service: {{page_data['title']}}\")\n                continue\n            \n            # Check if page already exists\n            existing_page = ServicePage.objects.filter(\n                slug=page_data['slug'],\n                tenant=tenant\n            ).first()\n            \n            if existing_page:\n                print(f\"ℹ️  Service page already exists: {{page_data['title']}}\")\n                continue\n            \n            # Create service page\n            service_page = ServicePage(\n                title=page_data['title'],\n                slug=page_data['slug'],\n                service_description=page_data.get('service_description', ''),\n                icon=page_data.get('icon', ''),\n                badge=page_data.get('badge', ''),\n                category=page_data.get('category', ''),\n                featured=page_data.get('featured', False),\n                order=page_data.get('order', 0),\n                price_data=page_data.get('price_data', {{}}),\n                tenant=tenant\n            )\n            \n            # Add content blocks if provided\n            if page_data.get('content_blocks'):\n                service_page.content_blocks = page_data['content_blocks']\n            \n            root_page.add_child(instance=service_page)\n            revision = service_page.save_revision()\n            revision.publish()\n            \n            print(f\"✅ Created service page: {{page_data['title']}}\")\n            \n        except Exception as e:\n            print(f\"❌ Failed to create service page {{page_data['title']}}: {{e}}\")\n\ndef create_landing_pages(tenants):\n    \"\"\"Create landing pages\"\"\"\n    landing_pages_data = {json.dumps(content_data.get('landing_pages', []), indent=2)}\n    \n    root_page = get_or_create_root_page()\n    if not root_page:\n        return\n    \n    for page_data in landing_pages_data:\n        try:\n            tenant = tenants.get(page_data['tenant'])\n            if not tenant:\n                print(f\"⚠️  Tenant not found for landing page: {{page_data['title']}}\")\n                continue\n            \n            # Check if page already exists\n            existing_page = LandingPage.objects.filter(\n                slug=page_data['slug'],\n                tenant=tenant\n            ).first()\n            \n            if existing_page:\n                print(f\"ℹ️  Landing page already exists: {{page_data['title']}}\")\n                continue\n            \n            # Create landing page\n            landing_page = LandingPage(\n                title=page_data['title'],\n                slug=page_data['slug'],\n                subtitle=page_data.get('subtitle', ''),\n                variant_name=page_data.get('variant_name', 'A'),\n                is_control=page_data.get('is_control', True),\n                campaign_id=page_data.get('campaign_id', ''),\n                conversion_goals=page_data.get('conversion_goals', []),\n                tenant=tenant\n            )\n            \n            # Add content blocks if provided\n            if page_data.get('content_blocks'):\n                landing_page.content_blocks = page_data['content_blocks']\n            \n            root_page.add_child(instance=landing_page)\n            revision = landing_page.save_revision()\n            revision.publish()\n            \n            print(f\"✅ Created landing page: {{page_data['title']}}\")\n            \n        except Exception as e:\n            print(f\"❌ Failed to create landing page {{page_data['title']}}: {{e}}\")\n\ndef create_team_members(tenants):\n    \"\"\"Create team member snippets\"\"\"\n    team_members_data = {json.dumps(content_data.get('team_members', []), indent=2)}\n    \n    for member_data in team_members_data:\n        try:\n            tenant = tenants.get(member_data['tenant'])\n            if not tenant:\n                print(f\"⚠️  Tenant not found for team member: {{member_data['name']}}\")\n                continue\n            \n            # Check if team member already exists\n            existing_member = TeamMember.objects.filter(\n                name=member_data['name'],\n                tenant=tenant\n            ).first()\n            \n            if existing_member:\n                print(f\"ℹ️  Team member already exists: {{member_data['name']}}\")\n                continue\n            \n            # Create team member\n            team_member = TeamMember.objects.create(\n                name=member_data['name'],\n                position=member_data.get('position', ''),\n                bio=member_data.get('bio', ''),\n                email=member_data.get('email', ''),\n                linkedin=member_data.get('linkedin', ''),\n                twitter=member_data.get('twitter', ''),\n                tenant=tenant\n            )\n            \n            print(f\"✅ Created team member: {{team_member.name}}\")\n            \n        except Exception as e:\n            print(f\"❌ Failed to create team member {{member_data['name']}}: {{e}}\")\n\ndef create_testimonials(tenants):\n    \"\"\"Create client testimonials\"\"\"\n    testimonials_data = {json.dumps(content_data.get('testimonials', []), indent=2)}\n    \n    for testimonial_data in testimonials_data:\n        try:\n            tenant = tenants.get(testimonial_data['tenant'])\n            if not tenant:\n                print(f\"⚠️  Tenant not found for testimonial: {{testimonial_data['client_name']}}\")\n                continue\n            \n            # Check if testimonial already exists\n            existing_testimonial = ClientTestimonial.objects.filter(\n                client_name=testimonial_data['client_name'],\n                tenant=tenant\n            ).first()\n            \n            if existing_testimonial:\n                print(f\"ℹ️  Testimonial already exists: {{testimonial_data['client_name']}}\")\n                continue\n            \n            # Create testimonial\n            testimonial = ClientTestimonial.objects.create(\n                client_name=testimonial_data['client_name'],\n                company=testimonial_data.get('company', ''),\n                position=testimonial_data.get('position', ''),\n                testimonial=testimonial_data['testimonial'],\n                rating=testimonial_data.get('rating', 5),\n                featured=testimonial_data.get('featured', False),\n                tenant=tenant\n            )\n            \n            print(f\"✅ Created testimonial: {{testimonial.client_name}}\")\n            \n        except Exception as e:\n            print(f\"❌ Failed to create testimonial {{testimonial_data['client_name']}}: {{e}}\")\n\ndef create_faq_pages(tenants):\n    \"\"\"Create FAQ pages\"\"\"\n    faq_pages_data = {json.dumps(content_data.get('faq_pages', []), indent=2)}\n    \n    root_page = get_or_create_root_page()\n    if not root_page:\n        return\n    \n    for page_data in faq_pages_data:\n        try:\n            tenant = tenants.get(page_data['tenant'])\n            if not tenant:\n                print(f\"⚠️  Tenant not found for FAQ: {{page_data['title']}}\")\n                continue\n            \n            # Check if page already exists\n            existing_page = FAQPage.objects.filter(\n                slug=page_data['slug'],\n                tenant=tenant\n            ).first()\n            \n            if existing_page:\n                print(f\"ℹ️  FAQ page already exists: {{page_data['title']}}\")\n                continue\n            \n            # Create FAQ page\n            faq_page = FAQPage(\n                title=page_data['title'],\n                slug=page_data['slug'],\n                category=page_data.get('category', ''),\n                tenant=tenant\n            )\n            \n            # Add FAQ content if provided\n            if page_data.get('faq_content'):\n                faq_page.faq_content = page_data['faq_content']\n            \n            root_page.add_child(instance=faq_page)\n            revision = faq_page.save_revision()\n            revision.publish()\n            \n            print(f\"✅ Created FAQ page: {{page_data['title']}}\")\n            \n        except Exception as e:\n            print(f\"❌ Failed to create FAQ page {{page_data['title']}}: {{e}}\")\n\ndef create_ai_templates(tenants):\n    \"\"\"Create AI content templates\"\"\"\n    ai_templates_data = {json.dumps(content_data.get('ai_content_templates', []), indent=2)}\n    \n    for template_data in ai_templates_data:\n        try:\n            tenant = tenants.get(template_data['tenant'])\n            if not tenant:\n                print(f\"⚠️  Tenant not found for AI template: {{template_data['name']}}\")\n                continue\n            \n            # Check if template already exists\n            existing_template = AIContentTemplate.objects.filter(\n                name=template_data['name'],\n                tenant=tenant\n            ).first()\n            \n            if existing_template:\n                print(f\"ℹ️  AI template already exists: {{template_data['name']}}\")\n                continue\n            \n            # Create AI template\n            ai_template = AIContentTemplate.objects.create(\n                name=template_data['name'],\n                content_type=template_data['content_type'],\n                template_content=template_data['template_content'],\n                ai_prompt=template_data.get('ai_prompt', ''),\n                variables=template_data.get('variables', {{}}),\n                tenant=tenant\n            )\n            \n            print(f\"✅ Created AI template: {{ai_template.name}}\")\n            \n        except Exception as e:\n            print(f\"❌ Failed to create AI template {{template_data['name']}}: {{e}}\")\n\ndef main():\n    \"\"\"Main migration function\"\"\"\n    print(\"🚀 Starting Wagtail content creation...\")\n    \n    # Ensure superuser exists\n    superuser = create_or_get_superuser()\n    \n    # Create tenants first\n    print(\"\\n📋 Creating tenants...\")\n    tenants = create_tenants()\n    \n    # Create content\n    print(\"\\n📝 Creating content pages...\")\n    create_content_pages(tenants)\n    \n    print(\"\\n🔧 Creating service pages...\")\n    create_service_pages(tenants)\n    \n    print(\"\\n🎯 Creating landing pages...\")\n    create_landing_pages(tenants)\n    \n    print(\"\\n👥 Creating team members...\")\n    create_team_members(tenants)\n    \n    print(\"\\n💬 Creating testimonials...\")\n    create_testimonials(tenants)\n    \n    print(\"\\n❓ Creating FAQ pages...\")\n    create_faq_pages(tenants)\n    \n    print(\"\\n🤖 Creating AI templates...\")\n    create_ai_templates(tenants)\n    \n    print(\"\\n🎉 Migration completed successfully!\")\n    print(\"\\n📊 Next steps:\")\n    print(\"1. Check the Wagtail admin at /admin/\")\n    print(\"2. Configure AI agent API access\")\n    print(\"3. Test content workflows\")\n    print(\"4. Setup content approval processes\")\n\nif __name__ == '__main__':\n    main()\n'''\n        \n        return script_content\n    \n    def create_migration_script_file(self, content_data: Dict[str, List[Dict]]) -> str:\n        \"\"\"Create and save the migration script to a file\"\"\"\n        script_content = self.create_wagtail_migration_script(content_data)\n        \n        # Create script file\n        script_path = '/tmp/wagtail_content_migration.py'\n        \n        try:\n            with open(script_path, 'w', encoding='utf-8') as f:\n                f.write(script_content)\n            \n            # Make script executable\n            os.chmod(script_path, 0o755)\n            \n            logger.info(f\"✅ Created migration script: {script_path}\")\n            return script_path\n            \n        except Exception as e:\n            logger.error(f\"❌ Failed to create migration script: {e}\")\n            raise\n    \n    def validate_migration_prerequisites(self) -> bool:\n        \"\"\"Validate that all prerequisites are met for migration\"\"\"\n        logger.info(\"🔍 Validating migration prerequisites...\")\n        \n        # Check database connection\n        if not self.connect_db():\n            return False\n        \n        # Check if Wagtail is accessible\n        try:\n            response = requests.get(f\"{self.wagtail_url}/admin/\", timeout=10)\n            if response.status_code != 200:\n                logger.warning(f\"⚠️ Wagtail admin not accessible at {self.wagtail_url}\")\n        except Exception as e:\n            logger.warning(f\"⚠️ Could not reach Wagtail: {e}\")\n        \n        logger.info(\"✅ Prerequisites validation completed\")\n        return True\n    \n    def run_enhanced_migration(self, use_sample_data: bool = True) -> bool:\n        \"\"\"Run the complete enhanced migration process\"\"\"\n        logger.info(\"🚀 Starting enhanced Strapi to Wagtail migration...\")\n        \n        # Validate prerequisites\n        if not self.validate_migration_prerequisites():\n            logger.error(\"❌ Prerequisites validation failed\")\n            return False\n        \n        try:\n            if use_sample_data:\n                logger.info(\"📝 Using enhanced sample data for migration...\")\n                content_data = self.create_enhanced_sample_content()\n            else:\n                logger.info(\"🔍 Fetching content from Strapi...\")\n                content_data = {\n                    'content_pages': self.fetch_strapi_content('articles'),\n                    'service_pages': self.fetch_strapi_content('services'),\n                    'landing_pages': self.fetch_strapi_content('landing-pages'),\n                    'team_members': self.fetch_strapi_content('team-members'),\n                    'testimonials': self.fetch_strapi_content('testimonials'),\n                    'faq_pages': self.fetch_strapi_content('faqs'),\n                }\n                \n                # Add default tenants if none found\n                if not content_data.get('tenants'):\n                    content_data['tenants'] = self.create_enhanced_sample_content()['tenants']\n            \n            # Create migration script\n            script_path = self.create_migration_script_file(content_data)\n            \n            # Update migration stats\n            self.migration_stats['pages_migrated'] = sum([\n                len(content_data.get('content_pages', [])),\n                len(content_data.get('service_pages', [])),\n                len(content_data.get('landing_pages', [])),\n                len(content_data.get('faq_pages', [])),\n            ])\n            \n            self.migration_stats['snippets_created'] = sum([\n                len(content_data.get('team_members', [])),\n                len(content_data.get('testimonials', [])),\n                len(content_data.get('ai_content_templates', [])),\n            ])\n            \n            self.migration_stats['tenants_created'] = len(content_data.get('tenants', []))\n            \n            logger.info(\"✅ Migration script created successfully!\")\n            self.print_migration_summary(script_path)\n            \n            return True\n            \n        except Exception as e:\n            logger.error(f\"❌ Migration failed: {e}\")\n            self.migration_stats['errors'].append(str(e))\n            return False\n            \n        finally:\n            self.close_db()\n    \n    def print_migration_summary(self, script_path: str):\n        \"\"\"Print comprehensive migration summary\"\"\"\n        print(\"\\n\" + \"=\"*60)\n        print(\"🎉 MIGRATION PREPARATION COMPLETED SUCCESSFULLY!\")\n        print(\"=\"*60)\n        \n        print(\"\\n📊 Migration Statistics:\")\n        print(f\"   • Tenants to create: {self.migration_stats['tenants_created']}\")\n        print(f\"   • Pages to migrate: {self.migration_stats['pages_migrated']}\")\n        print(f\"   • Snippets to create: {self.migration_stats['snippets_created']}\")\n        \n        if self.migration_stats['errors']:\n            print(f\"   • Errors encountered: {len(self.migration_stats['errors'])}\")\n        \n        print(\"\\n📋 Next Steps:\")\n        print(\"1. Ensure Wagtail CMS container is running:\")\n        print(\"   docker-compose up -d wagtail-cms\")\n        \n        print(\"\\n2. Copy migration script to container:\")\n        print(f\"   docker cp {script_path} wagtail-cms:/tmp/\")\n        \n        print(\"\\n3. Run migration script inside container:\")\n        print(\"   docker exec -it wagtail-cms python /tmp/wagtail_content_migration.py\")\n        \n        print(\"\\n4. Access Wagtail admin interface:\")\n        print(\"   http://localhost:8000/admin/ (admin/admin123)\")\n        \n        print(\"\\n5. Test AI agent API endpoints:\")\n        print(\"   • GET /api/cms/pages/\")\n        print(\"   • GET /api/tenants/{tenant_id}/content-summary/\")\n        print(\"   • POST /api/tenants/{tenant_id}/ai/content/\")\n        \n        print(\"\\n🔧 Additional Configuration:\")\n        print(\"   • Update URL routing to include enhanced API\")\n        print(\"   • Configure AI agent authentication\")\n        print(\"   • Setup content approval workflows\")\n        print(\"   • Test media file migrations\")\n        \n        print(\"\\n📁 Files Created:\")\n        print(f\"   • Migration script: {script_path}\")\n        print(f\"   • Migration log: ./migration.log\")\n        \n        print(\"\\n\" + \"=\"*60)\n\ndef main():\n    \"\"\"Main migration function\"\"\"\n    print(\"🎯 Enhanced Strapi to Wagtail Migration Tool\")\n    print(\"\" + \"=\"*50)\n    \n    # Configuration\n    migrator = EnhancedStrapiToWagtailMigrator(\n        postgres_host='localhost',\n        postgres_port=5432,\n        wagtail_url='http://localhost:8000'\n    )\n    \n    # Check if we should use sample data\n    use_sample = input(\"\\n📝 Use enhanced sample data? (y/n) [default: y]: \").lower().strip()\n    use_sample_data = use_sample != 'n'\n    \n    # Run migration\n    success = migrator.run_enhanced_migration(use_sample_data=use_sample_data)\n    \n    if success:\n        logger.info(\"\\n🎉 Enhanced migration preparation completed successfully!\")\n    else:\n        logger.error(\"\\n❌ Enhanced migration preparation failed\")\n        return 1\n    \n    return 0\n\nif __name__ == '__main__':\n    exit(main())\n'''\n        \n        return script_content