#!/usr/bin/env python3
"""
Unified CMS Deployment Script for BizOSaaS Platform

This script deploys the enhanced Wagtail CMS with:
- Strapi to Wagtail migration
- AI agent integration setup 
- Multi-tenant content management
- Enhanced API endpoints
- Content workflow configuration
"""

import os
import sys
import subprocess
import time
import json
import requests
from pathlib import Path
import logging

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('deployment.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class UnifiedCMSDeployer:
    """Unified CMS deployment orchestrator"""
    
    def __init__(self):
        self.wagtail_url = 'http://localhost:8000'
        self.services_health = {
            'postgres': False,
            'wagtail': False,
            'migration_completed': False
        }
        
    def check_service_health(self, service: str, url: str, timeout: int = 30) -> bool:
        """Check if a service is healthy and responsive"""
        logger.info(f"🔍 Checking {service} health at {url}...")
        
        for attempt in range(timeout):
            try:\n                response = requests.get(url, timeout=5)\n                if response.status_code in [200, 302]:  # Accept redirects for Django\n                    logger.info(f\"✅ {service} is healthy\")\n                    return True\n            except requests.exceptions.RequestException:\n                pass\n            \n            if attempt < timeout - 1:\n                time.sleep(2)\n                print(f\"⏳ Waiting for {service}... ({attempt + 1}/{timeout})\", end=\"\\r\")\n        \n        logger.warning(f\"⚠️ {service} health check failed after {timeout} attempts\")\n        return False\n    \n    def wait_for_postgres(self) -> bool:\n        \"\"\"Wait for PostgreSQL to be ready\"\"\"\n        logger.info(\"🐘 Waiting for PostgreSQL to be ready...\")\n        \n        # Try to connect using psql command if available\n        for attempt in range(30):\n            try:\n                result = subprocess.run([\n                    'pg_isready', '-h', 'localhost', '-p', '5432'\n                ], capture_output=True, timeout=5)\n                \n                if result.returncode == 0:\n                    logger.info(\"✅ PostgreSQL is ready\")\n                    self.services_health['postgres'] = True\n                    return True\n            except (subprocess.TimeoutExpired, FileNotFoundError):\n                pass\n            \n            time.sleep(2)\n        \n        logger.warning(\"⚠️ PostgreSQL readiness check failed, but continuing...\")\n        return False\n    \n    def start_wagtail_service(self) -> bool:\n        \"\"\"Start the Wagtail CMS service\"\"\"\n        logger.info(\"🚀 Starting Wagtail CMS service...\")\n        \n        try:\n            # Check if Docker Compose is available\n            result = subprocess.run(['docker-compose', '--version'], \n                                 capture_output=True, text=True)\n            \n            if result.returncode != 0:\n                logger.error(\"❌ Docker Compose not available\")\n                return False\n            \n            # Start Wagtail service\n            cmd = ['docker-compose', 'up', '-d', 'wagtail-cms']\n            result = subprocess.run(cmd, capture_output=True, text=True, cwd='/home/alagiri/projects/bizoholic/bizosaas')\n            \n            if result.returncode == 0:\n                logger.info(\"✅ Wagtail CMS service started\")\n                \n                # Wait for service to be healthy\n                if self.check_service_health('Wagtail', f'{self.wagtail_url}/admin/'):\n                    self.services_health['wagtail'] = True\n                    return True\n            else:\n                logger.error(f\"❌ Failed to start Wagtail: {result.stderr}\")\n                \n        except Exception as e:\n            logger.error(f\"❌ Error starting Wagtail service: {e}\")\n        \n        return False\n    \n    def create_database_migrations(self) -> bool:\n        \"\"\"Create and run database migrations\"\"\"\n        logger.info(\"📊 Creating database migrations...\")\n        \n        try:\n            # Run makemigrations\n            cmd = [\n                'docker', 'exec', '-it', 'wagtail-cms', \n                'python', 'manage.py', 'makemigrations'\n            ]\n            \n            result = subprocess.run(cmd, capture_output=True, text=True)\n            \n            if result.returncode == 0:\n                logger.info(\"✅ Database migrations created\")\n                \n                # Run migrate\n                cmd[4] = 'migrate'\n                result = subprocess.run(cmd, capture_output=True, text=True)\n                \n                if result.returncode == 0:\n                    logger.info(\"✅ Database migrations applied\")\n                    return True\n                else:\n                    logger.error(f\"❌ Failed to apply migrations: {result.stderr}\")\n            else:\n                logger.error(f\"❌ Failed to create migrations: {result.stderr}\")\n                \n        except Exception as e:\n            logger.error(f\"❌ Error with database migrations: {e}\")\n        \n        return False\n    \n    def run_content_migration(self) -> bool:\n        \"\"\"Run the Strapi to Wagtail content migration\"\"\"\n        logger.info(\"📦 Running content migration...\")\n        \n        try:\n            # First, run the migration preparation script\n            script_path = '/home/alagiri/projects/bizoholic/bizosaas/services/wagtail-cms/strapi_to_wagtail_migration_enhanced.py'\n            \n            if not os.path.exists(script_path):\n                logger.error(f\"❌ Migration script not found: {script_path}\")\n                return False\n            \n            # Run migration preparation\n            logger.info(\"🎯 Running migration preparation...\")\n            \n            # Use subprocess to run the migration script with auto-yes for sample data\n            process = subprocess.Popen(\n                ['python3', script_path],\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                text=True\n            )\n            \n            # Send 'y' to use sample data\n            stdout, stderr = process.communicate(input='y\\n')\n            \n            if process.returncode == 0:\n                logger.info(\"✅ Migration preparation completed\")\n                logger.info(f\"Migration output: {stdout}\")\n                \n                # Copy and run the generated migration script in the container\n                migration_script = '/tmp/wagtail_content_migration.py'\n                \n                if os.path.exists(migration_script):\n                    # Copy script to container\n                    copy_cmd = ['docker', 'cp', migration_script, 'wagtail-cms:/tmp/']\n                    result = subprocess.run(copy_cmd, capture_output=True)\n                    \n                    if result.returncode == 0:\n                        logger.info(\"✅ Migration script copied to container\")\n                        \n                        # Run migration script in container\n                        run_cmd = [\n                            'docker', 'exec', '-it', 'wagtail-cms',\n                            'python', '/tmp/wagtail_content_migration.py'\n                        ]\n                        \n                        result = subprocess.run(run_cmd, capture_output=True, text=True)\n                        \n                        if result.returncode == 0:\n                            logger.info(\"✅ Content migration completed successfully\")\n                            logger.info(f\"Migration result: {result.stdout}\")\n                            self.services_health['migration_completed'] = True\n                            return True\n                        else:\n                            logger.error(f\"❌ Content migration failed: {result.stderr}\")\n                    else:\n                        logger.error(\"❌ Failed to copy migration script to container\")\n                else:\n                    logger.error(\"❌ Generated migration script not found\")\n            else:\n                logger.error(f\"❌ Migration preparation failed: {stderr}\")\n                \n        except Exception as e:\n            logger.error(f\"❌ Error during content migration: {e}\")\n        \n        return False\n    \n    def create_superuser(self) -> bool:\n        \"\"\"Create initial superuser for Wagtail admin\"\"\"\n        logger.info(\"👤 Creating superuser...\")\n        \n        try:\n            # Create superuser via Django management command\n            cmd = [\n                'docker', 'exec', '-i', 'wagtail-cms',\n                'python', 'manage.py', 'shell', '-c',\n                '''\nfrom django.contrib.auth import get_user_model\nUser = get_user_model()\nif not User.objects.filter(username=\"admin\").exists():\n    User.objects.create_superuser(\"admin\", \"admin@bizoholic.com\", \"admin123\")\n    print(\"Superuser created: admin/admin123\")\nelse:\n    print(\"Superuser already exists\")\n'''\n            ]\n            \n            result = subprocess.run(cmd, capture_output=True, text=True)\n            \n            if result.returncode == 0:\n                logger.info(\"✅ Superuser setup completed\")\n                logger.info(f\"Result: {result.stdout}\")\n                return True\n            else:\n                logger.error(f\"❌ Failed to create superuser: {result.stderr}\")\n                \n        except Exception as e:\n            logger.error(f\"❌ Error creating superuser: {e}\")\n        \n        return False\n    \n    def test_api_endpoints(self) -> bool:\n        \"\"\"Test the enhanced API endpoints\"\"\"\n        logger.info(\"🧪 Testing API endpoints...\")\n        \n        test_endpoints = [\n            '/api/tenants/',\n            '/api/cms/pages/',\n            '/api/tenants/bizoholic-main/content-summary/',\n            '/api/tenants/bizoholic-main/landing-pages/',\n            '/api/tenants/bizoholic-main/service-pages/',\n        ]\n        \n        success_count = 0\n        \n        for endpoint in test_endpoints:\n            try:\n                url = f\"{self.wagtail_url}{endpoint}\"\n                response = requests.get(url, timeout=10)\n                \n                if response.status_code == 200:\n                    logger.info(f\"✅ {endpoint} - OK\")\n                    success_count += 1\n                else:\n                    logger.warning(f\"⚠️ {endpoint} - Status: {response.status_code}\")\n                    \n            except Exception as e:\n                logger.error(f\"❌ {endpoint} - Error: {e}\")\n        \n        success_rate = (success_count / len(test_endpoints)) * 100\n        logger.info(f\"📊 API endpoints test success rate: {success_rate:.1f}% ({success_count}/{len(test_endpoints)})\")\n        \n        return success_rate >= 60  # At least 60% success rate\n    \n    def generate_deployment_summary(self) -> None:\n        \"\"\"Generate comprehensive deployment summary\"\"\"\n        print(\"\\n\" + \"=\"*70)\n        print(\"🎉 UNIFIED CMS DEPLOYMENT COMPLETED!\")\n        print(\"=\"*70)\n        \n        print(\"\\n📊 Service Health Status:\")\n        for service, healthy in self.services_health.items():\n            status = \"✅ Healthy\" if healthy else \"❌ Unhealthy\"\n            print(f\"   • {service.title()}: {status}\")\n        \n        print(\"\\n🌐 Access Points:\")\n        print(f\"   • Wagtail Admin: {self.wagtail_url}/admin/\")\n        print(f\"   • Login: admin / admin123\")\n        print(f\"   • Health Check: {self.wagtail_url}/health/\")\n        \n        print(\"\\n🔌 API Endpoints:\")\n        print(f\"   • Tenants List: {self.wagtail_url}/api/tenants/\")\n        print(f\"   • CMS Pages: {self.wagtail_url}/api/cms/pages/\")\n        print(f\"   • Content Summary: {self.wagtail_url}/api/tenants/{{tenant_id}}/content-summary/\")\n        print(f\"   • AI Content Creation: {self.wagtail_url}/api/tenants/{{tenant_id}}/ai/content/\")\n        \n        print(\"\\n🤖 AI Agent Integration:\")\n        print(\"   • Content creation endpoint configured\")\n        print(\"   • Content update endpoint configured\")\n        print(\"   • AI templates system enabled\")\n        print(\"   • Multi-tenant content isolation\")\n        \n        print(\"\\n📋 Content Management Features:\")\n        print(\"   • Multi-tenant page management\")\n        print(\"   • Service pages with pricing\")\n        print(\"   • Landing pages with A/B testing\")\n        print(\"   • Content pages (blog posts)\")\n        print(\"   • FAQ pages with structured content\")\n        print(\"   • Team member profiles\")\n        print(\"   • Client testimonials\")\n        print(\"   • AI content templates\")\n        \n        print(\"\\n🔧 Next Steps:\")\n        print(\"   1. Configure AI agent authentication tokens\")\n        print(\"   2. Setup content approval workflows\")\n        print(\"   3. Test content creation via API\")\n        print(\"   4. Configure media file storage\")\n        print(\"   5. Setup monitoring and logging\")\n        \n        print(\"\\n📁 Important Files:\")\n        print(\"   • Migration logs: ./migration.log\")\n        print(\"   • Deployment logs: ./deployment.log\")\n        print(\"   • Enhanced API: /cms/enhanced_api_views.py\")\n        print(\"   • URL Configuration: /wagtail_cms/urls.py\")\n        \n        print(\"\\n\" + \"=\"*70)\n    \n    def deploy(self) -> bool:\n        \"\"\"Run complete deployment process\"\"\"\n        logger.info(\"🚀 Starting Unified CMS Deployment...\")\n        \n        # Step 1: Wait for PostgreSQL\n        self.wait_for_postgres()\n        \n        # Step 2: Start Wagtail service\n        if not self.start_wagtail_service():\n            logger.error(\"❌ Failed to start Wagtail service\")\n            return False\n        \n        # Step 3: Create database migrations\n        if not self.create_database_migrations():\n            logger.error(\"❌ Database migrations failed\")\n            return False\n        \n        # Step 4: Create superuser\n        if not self.create_superuser():\n            logger.error(\"❌ Superuser creation failed\")\n            return False\n        \n        # Step 5: Run content migration\n        if not self.run_content_migration():\n            logger.error(\"❌ Content migration failed\")\n            return False\n        \n        # Step 6: Test API endpoints\n        if not self.test_api_endpoints():\n            logger.warning(\"⚠️ Some API endpoints are not working\")\n        \n        # Generate deployment summary\n        self.generate_deployment_summary()\n        \n        return all(self.services_health.values())\n\ndef main():\n    \"\"\"Main deployment function\"\"\"\n    print(\"🎯 Unified CMS Deployment for BizOSaaS Platform\")\n    print(\"=\" * 50)\n    \n    deployer = UnifiedCMSDeployer()\n    \n    try:\n        success = deployer.deploy()\n        \n        if success:\n            logger.info(\"🎉 Unified CMS deployment completed successfully!\")\n            return 0\n        else:\n            logger.error(\"❌ Unified CMS deployment failed\")\n            return 1\n            \n    except KeyboardInterrupt:\n        logger.info(\"\\n⏹️ Deployment interrupted by user\")\n        return 1\n    except Exception as e:\n        logger.error(f\"❌ Unexpected error during deployment: {e}\")\n        return 1\n\nif __name__ == '__main__':\n    exit(main())