#!/usr/bin/env python3\n\"\"\"\nTest suite for Product Sourcing Workflow [P8] main service\n\"\"\"\n\nimport pytest\nimport asyncio\nfrom fastapi.testclient import TestClient\nfrom unittest.mock import patch, MagicMock\nimport json\nfrom datetime import datetime\n\n# Import the main app\nsys.path.append('..')\nfrom main import app\n\n# Test client\nclient = TestClient(app)\n\nclass TestProductSourcingAPI:\n    \"\"\"Test suite for Product Sourcing API endpoints\"\"\"\n    \n    def test_health_check(self):\n        \"\"\"Test health check endpoint\"\"\"\n        response = client.get(\"/health\")\n        assert response.status_code == 200\n        \n        data = response.json()\n        assert data[\"status\"] == \"healthy\"\n        assert data[\"service\"] == \"Product Sourcing Workflow\"\n        assert data[\"version\"] == \"1.0.0\"\n        assert \"timestamp\" in data\n    \n    def test_product_discovery_endpoint(self):\n        \"\"\"Test product discovery endpoint\"\"\"\n        payload = {\n            \"keywords\": [\"wireless earbuds\", \"bluetooth headphones\"],\n            \"category\": \"electronics\",\n            \"market_region\": \"IN\",\n            \"profit_margin_min\": 20.0\n        }\n        \n        with patch('main.process_product_discovery.delay') as mock_task:\n            mock_task.return_value.id = \"test_task_123\"\n            \n            response = client.post(\"/api/product-sourcing/discover\", json=payload)\n            assert response.status_code == 200\n            \n            data = response.json()\n            assert data[\"task_id\"] == \"test_task_123\"\n            assert data[\"status\"] == \"started\"\n            assert \"estimated_completion\" in data\n    \n    def test_product_discovery_missing_keywords(self):\n        \"\"\"Test product discovery with missing keywords\"\"\"\n        payload = {\n            \"category\": \"electronics\",\n            \"market_region\": \"IN\"\n        }\n        \n        response = client.post(\"/api/product-sourcing/discover\", json=payload)\n        assert response.status_code == 422  # Validation error\n    \n    def test_get_trending_products(self):\n        \"\"\"Test trending products endpoint\"\"\"\n        response = client.get(\"/api/product-sourcing/trends?category=electronics&limit=10\")\n        assert response.status_code == 200\n        \n        data = response.json()\n        assert \"trending_products\" in data\n        assert len(data[\"trending_products\"]) <= 10\n        assert data[\"region\"] == \"IN\"  # Default region\n        assert \"updated_at\" in data\n    \n    def test_analyze_product(self):\n        \"\"\"Test product analysis endpoint\"\"\"\n        payload = {\n            \"asin\": \"B08N5WRWNW\",\n            \"product_title\": \"Wireless Bluetooth Earbuds\",\n            \"current_price\": 2999,\n            \"category\": \"electronics\",\n            \"deep_analysis\": True\n        }\n        \n        with patch('main.amazon_client.get_product_details') as mock_amazon:\n            mock_amazon.return_value = {\n                \"title\": \"Wireless Bluetooth Earbuds\",\n                \"price\": 2999,\n                \"rating\": 4.2,\n                \"review_count\": 1250\n            }\n            \n            response = client.post(\"/api/product-sourcing/analyze\", json=payload)\n            assert response.status_code == 200\n            \n            data = response.json()\n            assert \"product_analysis\" in data\n            assert \"scoring\" in data[\"product_analysis\"]\n            assert \"recommendations\" in data[\"product_analysis\"]\n    \n    def test_get_recommendations(self):\n        \"\"\"Test personalized recommendations endpoint\"\"\"\n        response = client.get(\"/api/product-sourcing/recommendations?business_type=general&limit=5\")\n        assert response.status_code == 200\n        \n        data = response.json()\n        assert \"recommendations\" in data\n        assert len(data[\"recommendations\"]) <= 5\n        assert data[\"business_type\"] == \"general\"\n    \n    def test_classify_product(self):\n        \"\"\"Test product classification endpoint\"\"\"\n        payload = {\n            \"product_title\": \"Premium Wireless Headphones\",\n            \"current_price\": 8999,\n            \"category\": \"electronics\"\n        }\n        \n        response = client.post(\"/api/product-sourcing/classify\", json=payload)\n        assert response.status_code == 200\n        \n        data = response.json()\n        assert \"classification\" in data\n        assert \"category\" in data[\"classification\"]\n        assert \"overall_score\" in data[\"classification\"]\n        assert \"confidence\" in data[\"classification\"]\n        assert \"breakdown\" in data[\"classification\"]\n    \n    def test_trend_analysis(self):\n        \"\"\"Test trend analysis endpoint\"\"\"\n        payload = {\n            \"query\": \"smart fitness tracker\",\n            \"platforms\": [\"google\", \"tiktok\", \"instagram\"],\n            \"time_range\": \"30d\",\n            \"region\": \"IN\"\n        }\n        \n        response = client.post(\"/api/trends/analyze\", json=payload)\n        assert response.status_code == 200\n        \n        data = response.json()\n        assert \"trend_analysis\" in data\n        assert \"overall_score\" in data[\"trend_analysis\"]\n        assert \"platforms\" in data[\"trend_analysis\"]\n    \n    def test_market_intelligence(self):\n        \"\"\"Test market intelligence endpoint\"\"\"\n        response = client.get(\"/api/product-sourcing/market-intel?category=electronics&competitor_count=10\")\n        assert response.status_code == 200\n        \n        data = response.json()\n        assert \"market_intelligence\" in data\n        assert \"generated_at\" in data\n\nclass TestProductSourcingAgents:\n    \"\"\"Test suite for AI agents\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_product_sourcing_agent(self):\n        \"\"\"Test main product sourcing agent\"\"\"\n        from agents.product_sourcing_agent import ProductSourcingAgent\n        \n        agent = ProductSourcingAgent()\n        \n        input_data = {\n            \"keywords\": [\"wireless mouse\"],\n            \"category\": \"electronics\",\n            \"market_region\": \"IN\"\n        }\n        \n        response = await agent.process(input_data)\n        assert response.success == True\n        assert \"workflow_summary\" in response.data\n        assert \"top_recommendations\" in response.data\n    \n    @pytest.mark.asyncio\n    async def test_trend_analysis_agent(self):\n        \"\"\"Test trend analysis agent\"\"\"\n        from agents.trend_analysis_agent import TrendAnalysisAgent\n        \n        agent = TrendAnalysisAgent()\n        \n        input_data = {\n            \"query\": \"gaming keyboard\",\n            \"platforms\": [\"google\", \"tiktok\"],\n            \"time_range\": \"30d\",\n            \"region\": \"IN\"\n        }\n        \n        response = await agent.process(input_data)\n        assert response.success == True\n        assert \"overall_score\" in response.data\n        assert \"platform_analyses\" in response.data\n    \n    @pytest.mark.asyncio\n    async def test_competitor_monitor_agent(self):\n        \"\"\"Test competitor monitoring agent\"\"\"\n        from agents.competitor_monitor_agent import CompetitorMonitorAgent\n        \n        agent = CompetitorMonitorAgent()\n        \n        input_data = {\n            \"keywords\": [\"smartphone case\"],\n            \"category\": \"accessories\",\n            \"market_region\": \"IN\",\n            \"competitor_limit\": 10\n        }\n        \n        response = await agent.process(input_data)\n        assert response.success == True\n        assert \"competitor_discovery\" in response.data\n        assert \"competitive_landscape\" in response.data\n    \n    @pytest.mark.asyncio\n    async def test_profit_calculation_agent(self):\n        \"\"\"Test profit calculation agent\"\"\"\n        from agents.profit_calculation_agent import ProfitCalculationAgent\n        \n        agent = ProfitCalculationAgent()\n        \n        product_data = {\n            \"title\": \"Test Product\",\n            \"price\": 1999,\n            \"category\": \"electronics\",\n            \"weight\": 0.5\n        }\n        \n        input_data = {\n            \"product_data\": product_data,\n            \"market_region\": \"IN\",\n            \"include_fees\": True,\n            \"include_taxes\": True\n        }\n        \n        response = await agent.process(input_data)\n        assert response.success == True\n        assert \"cost_breakdown\" in response.data\n        assert \"profit_analysis\" in response.data\n        assert \"roi_projections\" in response.data\n    \n    @pytest.mark.asyncio\n    async def test_quality_assessment_agent(self):\n        \"\"\"Test quality assessment agent\"\"\"\n        from agents.quality_assessment_agent import QualityAssessmentAgent\n        \n        agent = QualityAssessmentAgent()\n        \n        product_data = {\n            \"title\": \"Premium Headphones\",\n            \"rating\": 4.5,\n            \"review_count\": 2500,\n            \"category\": \"electronics\",\n            \"features\": [\"Noise Cancellation\", \"Wireless\", \"Long Battery\"]\n        }\n        \n        input_data = {\"product_data\": product_data}\n        \n        response = await agent.process(input_data)\n        assert response.success == True\n        assert \"overall_quality_score\" in response.data[\"assessment_summary\"]\n        assert \"quality_grade\" in response.data[\"assessment_summary\"]\n    \n    @pytest.mark.asyncio\n    async def test_risk_evaluation_agent(self):\n        \"\"\"Test risk evaluation agent\"\"\"\n        from agents.risk_evaluation_agent import RiskEvaluationAgent\n        \n        agent = RiskEvaluationAgent()\n        \n        product_data = {\n            \"title\": \"Smart Home Device\",\n            \"price\": 5999,\n            \"category\": \"electronics\",\n            \"rating\": 4.0\n        }\n        \n        input_data = {\n            \"product_data\": product_data,\n            \"market_region\": \"IN\"\n        }\n        \n        response = await agent.process(input_data)\n        assert response.success == True\n        assert \"overall_risk_score\" in response.data[\"risk_summary\"]\n        assert \"risk_level\" in response.data[\"risk_summary\"]\n        assert \"risk_mitigation_strategies\" in response.data\n    \n    @pytest.mark.asyncio\n    async def test_forecasting_agent(self):\n        \"\"\"Test forecasting agent\"\"\"\n        from agents.forecasting_agent import ForecastingAgent\n        \n        agent = ForecastingAgent()\n        \n        input_data = {\n            \"trend_data\": {\"trend_summary\": {\"overall_trend_score\": 75}},\n            \"product_data\": {\"products\": [{\"price\": 2999, \"category\": \"electronics\"}]},\n            \"competition_data\": {\"competitive_landscape\": {\"competitive_intensity\": \"medium\"}},\n            \"forecast_horizon\": \"6_months\",\n            \"market_region\": \"IN\"\n        }\n        \n        response = await agent.process(input_data)\n        assert response.success == True\n        assert \"demand_forecasting\" in response.data\n        assert \"revenue_projections\" in response.data\n        assert \"market_growth_analysis\" in response.data\n\nclass TestDataModels:\n    \"\"\"Test data models and validation\"\"\"\n    \n    def test_product_discovery_request_validation(self):\n        \"\"\"Test ProductDiscoveryRequest validation\"\"\"\n        from main import ProductDiscoveryRequest\n        \n        # Valid request\n        valid_data = {\n            \"keywords\": [\"test product\"],\n            \"market_region\": \"IN\",\n            \"profit_margin_min\": 20.0\n        }\n        \n        request = ProductDiscoveryRequest(**valid_data)\n        assert request.keywords == [\"test product\"]\n        assert request.market_region == \"IN\"\n        assert request.profit_margin_min == 20.0\n    \n    def test_product_analysis_request_validation(self):\n        \"\"\"Test ProductAnalysisRequest validation\"\"\"\n        from main import ProductAnalysisRequest\n        \n        valid_data = {\n            \"product_title\": \"Test Product\",\n            \"current_price\": 1999,\n            \"category\": \"electronics\"\n        }\n        \n        request = ProductAnalysisRequest(**valid_data)\n        assert request.product_title == \"Test Product\"\n        assert request.current_price == 1999\n        assert request.category == \"electronics\"\n    \n    def test_product_score_dataclass(self):\n        \"\"\"Test ProductScore dataclass\"\"\"\n        from main import ProductScore, ProductCategory\n        \n        score = ProductScore(\n            trend_score=75.5,\n            profit_score=68.2,\n            competition_score=45.8,\n            risk_score=32.1,\n            overall_score=64.4,\n            category=ProductCategory.MID_TIER,\n            confidence=0.85\n        )\n        \n        assert score.trend_score == 75.5\n        assert score.category == ProductCategory.MID_TIER\n        assert score.confidence == 0.85\n\nclass TestAmazonIntegration:\n    \"\"\"Test Amazon SP-API integration\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_amazon_product_search(self):\n        \"\"\"Test Amazon product search functionality\"\"\"\n        from main import AmazonSPAPIClient\n        \n        client = AmazonSPAPIClient()\n        \n        with patch('aiohttp.ClientSession.post') as mock_post:\n            mock_response = MagicMock()\n            mock_response.status = 200\n            mock_response.json.return_value = {\n                \"products\": [\n                    {\n                        \"asin\": \"B08N5WRWNW\",\n                        \"title\": \"Test Product\",\n                        \"price\": 1999,\n                        \"rating\": 4.2\n                    }\n                ]\n            }\n            mock_post.return_value.__aenter__.return_value = mock_response\n            \n            results = await client.search_products([\"test keyword\"])\n            assert len(results) == 1\n            assert results[0][\"asin\"] == \"B08N5WRWNW\"\n    \n    @pytest.mark.asyncio\n    async def test_amazon_product_details(self):\n        \"\"\"Test Amazon product details retrieval\"\"\"\n        from main import AmazonSPAPIClient\n        \n        client = AmazonSPAPIClient()\n        \n        with patch('aiohttp.ClientSession.get') as mock_get:\n            mock_response = MagicMock()\n            mock_response.status = 200\n            mock_response.json.return_value = {\n                \"asin\": \"B08N5WRWNW\",\n                \"title\": \"Test Product\",\n                \"price\": 1999,\n                \"rating\": 4.2,\n                \"features\": [\"Feature 1\", \"Feature 2\"]\n            }\n            mock_get.return_value.__aenter__.return_value = mock_response\n            \n            result = await client.get_product_details(\"B08N5WRWNW\")\n            assert result[\"asin\"] == \"B08N5WRWNW\"\n            assert result[\"title\"] == \"Test Product\"\n\nclass TestProductScoringEngine:\n    \"\"\"Test product scoring and classification engine\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_product_scoring(self):\n        \"\"\"Test product scoring functionality\"\"\"\n        from main import ProductScoringEngine\n        \n        engine = ProductScoringEngine()\n        \n        product_data = {\n            \"title\": \"High Quality Headphones\",\n            \"price\": 3999,\n            \"rating\": 4.6,\n            \"review_count\": 1500,\n            \"category\": \"electronics\",\n            \"features\": [\"Noise Cancellation\", \"Wireless\", \"Long Battery\"],\n            \"weight\": 0.3\n        }\n        \n        score = await engine.score_product(product_data)\n        \n        assert 0 <= score.trend_score <= 100\n        assert 0 <= score.profit_score <= 100\n        assert 0 <= score.competition_score <= 100\n        assert 0 <= score.risk_score <= 100\n        assert 0 <= score.overall_score <= 100\n        assert 0 <= score.confidence <= 1\n        assert score.category in [\"hook\", \"mid_tier\", \"hero\", \"not_qualified\"]\n    \n    def test_product_classification(self):\n        \"\"\"Test product classification logic\"\"\"\n        from main import ProductScoringEngine, ProductCategory\n        \n        engine = ProductScoringEngine()\n        \n        # Test Hook classification\n        hook_category = engine._classify_product(85, 75, 60)\n        assert hook_category == ProductCategory.HOOK\n        \n        # Test Hero classification\n        hero_category = engine._classify_product(75, 50, 70)\n        assert hero_category == ProductCategory.HERO\n        \n        # Test Mid-tier classification\n        mid_tier_category = engine._classify_product(60, 45, 50)\n        assert mid_tier_category == ProductCategory.MID_TIER\n        \n        # Test Not Qualified classification\n        not_qualified_category = engine._classify_product(40, 30, 20)\n        assert not_qualified_category == ProductCategory.NOT_QUALIFIED\n\nclass TestTrendAnalysis:\n    \"\"\"Test trend analysis functionality\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_trend_analysis_service(self):\n        \"\"\"Test trend analysis service\"\"\"\n        from main import TrendAnalysisService\n        \n        service = TrendAnalysisService()\n        \n        result = await service.analyze_trends(\n            \"gaming laptop\",\n            [\"google\", \"tiktok\"],\n            \"30d\"\n        )\n        \n        assert \"query\" in result\n        assert \"trends\" in result\n        assert \"overall_score\" in result\n        assert \"trend_direction\" in result\n    \n    def test_platform_trend_analysis(self):\n        \"\"\"Test individual platform trend analysis\"\"\"\n        from main import TrendAnalysisService\n        \n        service = TrendAnalysisService()\n        \n        # Test Google trends (mock)\n        google_result = asyncio.run(service._analyze_google_trends(\"test query\", \"30d\"))\n        assert \"score\" in google_result\n        assert \"search_volume\" in google_result\n        \n        # Test TikTok trends (mock)\n        tiktok_result = asyncio.run(service._analyze_tiktok_trends(\"test query\", \"30d\", \"IN\"))\n        assert \"score\" in tiktok_result\n        assert \"viral_potential\" in tiktok_result\n\nclass TestMarketIntelligence:\n    \"\"\"Test market intelligence functionality\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_market_analysis(self):\n        \"\"\"Test market analysis functionality\"\"\"\n        from main import MarketIntelligenceService\n        \n        service = MarketIntelligenceService()\n        \n        result = await service.analyze_market(\"electronics\", 10)\n        \n        assert \"category\" in result\n        assert \"market_size\" in result\n        assert \"competition_analysis\" in result\n        assert \"opportunities\" in result\n\n# Error handling tests\nclass TestErrorHandling:\n    \"\"\"Test error handling and edge cases\"\"\"\n    \n    def test_invalid_product_discovery_request(self):\n        \"\"\"Test invalid product discovery request\"\"\"\n        # Missing required keywords\n        response = client.post(\"/api/product-sourcing/discover\", json={})\n        assert response.status_code == 422\n    \n    def test_invalid_task_id(self):\n        \"\"\"Test invalid task ID for status check\"\"\"\n        response = client.get(\"/api/product-sourcing/discovery/invalid_task_id/status\")\n        assert response.status_code == 404\n    \n    def test_invalid_asin_format(self):\n        \"\"\"Test invalid ASIN format in product analysis\"\"\"\n        payload = {\n            \"asin\": \"invalid_asin\",\n            \"product_title\": \"Test Product\"\n        }\n        \n        # This should still work as ASIN validation is optional\n        response = client.post(\"/api/product-sourcing/analyze\", json=payload)\n        # Should not crash, might return empty data from Amazon API\n        assert response.status_code in [200, 400, 422]\n\n# Performance tests\nclass TestPerformance:\n    \"\"\"Test performance and load handling\"\"\"\n    \n    def test_concurrent_requests(self):\n        \"\"\"Test handling of concurrent requests\"\"\"\n        import threading\n        import time\n        \n        results = []\n        \n        def make_request():\n            response = client.get(\"/api/product-sourcing/trends?limit=5\")\n            results.append(response.status_code)\n        \n        # Create 10 concurrent threads\n        threads = []\n        for _ in range(10):\n            thread = threading.Thread(target=make_request)\n            threads.append(thread)\n            thread.start()\n        \n        # Wait for all threads to complete\n        for thread in threads:\n            thread.join()\n        \n        # All requests should succeed\n        assert all(status == 200 for status in results)\n        assert len(results) == 10\n    \n    def test_large_keyword_list(self):\n        \"\"\"Test handling of large keyword lists\"\"\"\n        large_keywords = [f\"keyword_{i}\" for i in range(100)]\n        \n        payload = {\n            \"keywords\": large_keywords,\n            \"category\": \"electronics\"\n        }\n        \n        with patch('main.process_product_discovery.delay') as mock_task:\n            mock_task.return_value.id = \"test_large_task\"\n            \n            response = client.post(\"/api/product-sourcing/discover\", json=payload)\n            # Should handle large lists gracefully\n            assert response.status_code in [200, 413]  # 413 if payload too large\n\nif __name__ == \"__main__\":\n    pytest.main([__file__, \"-v\"])