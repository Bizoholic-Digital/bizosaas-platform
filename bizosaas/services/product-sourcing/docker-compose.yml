version: '3.8'

services:
  product-sourcing:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: product-sourcing-service
    ports:
      - "8026:8026"
    environment:
      - DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/bizosaas
      - REDIS_URL=redis://host.docker.internal:6379
      - BRAIN_AI_SERVICE_URL=http://host.docker.internal:8001
      - AMAZON_ACCESS_KEY=${AMAZON_ACCESS_KEY}
      - AMAZON_SECRET_KEY=${AMAZON_SECRET_KEY}
      - AMAZON_MARKETPLACE_ID=A21TJRUUN4KGV
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    networks:
      - product-sourcing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery worker for background tasks
  product-sourcing-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: product-sourcing-worker
    command: celery -A main.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/bizosaas
      - REDIS_URL=redis://host.docker.internal:6379
      - BRAIN_AI_SERVICE_URL=http://host.docker.internal:8001
      - AMAZON_ACCESS_KEY=${AMAZON_ACCESS_KEY}
      - AMAZON_SECRET_KEY=${AMAZON_SECRET_KEY}
      - AMAZON_MARKETPLACE_ID=A21TJRUUN4KGV
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
      - product-sourcing
    networks:
      - product-sourcing-network

  # Celery beat for scheduled tasks
  product-sourcing-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: product-sourcing-beat
    command: celery -A main.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/bizosaas
      - REDIS_URL=redis://host.docker.internal:6379
      - BRAIN_AI_SERVICE_URL=http://host.docker.internal:8001
      - AMAZON_ACCESS_KEY=${AMAZON_ACCESS_KEY}
      - AMAZON_SECRET_KEY=${AMAZON_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
      - product-sourcing
    networks:
      - product-sourcing-network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: product-sourcing-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - product-sourcing-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: product-sourcing-postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=bizosaas
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - product-sourcing-network

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: product-sourcing-flower
    command: celery -A main.celery_app flower --port=5555
    ports:
      - "5556:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/bizosaas
      - REDIS_URL=redis://host.docker.internal:6379
      - FLOWER_PORT=5555
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - redis
      - product-sourcing-worker
    networks:
      - product-sourcing-network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: product-sourcing-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - product-sourcing-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: product-sourcing-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - product-sourcing-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  product-sourcing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16