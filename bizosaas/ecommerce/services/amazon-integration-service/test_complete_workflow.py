#!/usr/bin/env python3
"""
Complete Workflow Test Script
Tests the end-to-end Amazon listing automation workflow
"""

import asyncio
import json
from datetime import datetime
from automated_product_workflow import (
    AutomatedProductWorkflow,
    ProductWorkflowRequest,
    automate_amazon_listing
)

# ANSI color codes for better output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header(text):
    """Print formatted header"""
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'='*80}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{text.center(80)}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{'='*80}{Colors.ENDC}\n")

def print_section(text):
    """Print formatted section"""
    print(f"\n{Colors.OKBLUE}{Colors.BOLD}{text}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}{'-'*len(text)}{Colors.ENDC}")

def print_success(text):
    """Print success message"""
    print(f"{Colors.OKGREEN}✓ {text}{Colors.ENDC}")

def print_error(text):
    """Print error message"""
    print(f"{Colors.FAIL}✗ {text}{Colors.ENDC}")

def print_info(label, value):
    """Print formatted info"""
    print(f"{Colors.OKCYAN}{label}:{Colors.ENDC} {value}")

def format_price(price):
    """Format price with currency symbol"""
    return f"₹{price:,.2f}" if price else "N/A"

async def test_complete_workflow():
    """
    Test the complete Amazon listing workflow with a verified sports product
    """

    print_header("AMAZON LISTING WORKFLOW - COMPLETE TEST")

    # Test product - Boldfit Yoga Mat (verified ASIN)
    test_asin = "B0DX1QJFK4"
    test_marketplace = "amazon.in"

    print_info("Test ASIN", test_asin)
    print_info("Marketplace", test_marketplace)
    print_info("Category", "Sports & Fitness")
    print_info("Test Start Time", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

    # Initialize workflow
    workflow = AutomatedProductWorkflow()

    try:
        # Create workflow request
        request = ProductWorkflowRequest(
            asin=test_asin,
            marketplace=test_marketplace,
            target_platform="saleor",
            profit_margin=0.3,  # 30% profit margin
            ai_enhancement=True,
            generate_images=True,
            seo_optimization=True
        )

        print_section("WORKFLOW CONFIGURATION")
        print_info("Target Platform", request.target_platform)
        print_info("Profit Margin", f"{request.profit_margin * 100}%")
        print_info("AI Enhancement", "Enabled" if request.ai_enhancement else "Disabled")
        print_info("Image Generation", "Enabled" if request.generate_images else "Disabled")
        print_info("SEO Optimization", "Enabled" if request.seo_optimization else "Disabled")

        # Execute workflow
        print_section("EXECUTING WORKFLOW")
        print(f"{Colors.WARNING}Processing... This may take 30-60 seconds{Colors.ENDC}")

        start_time = datetime.now()
        result = await workflow.execute_workflow(request)
        execution_time = (datetime.now() - start_time).total_seconds()

        # Check workflow success
        if not result.success:
            print_error(f"Workflow failed: {result.error}")
            return

        print_success(f"Workflow completed in {execution_time:.2f} seconds")

        # Display results
        print_header("WORKFLOW RESULTS")

        # 1. Product Data
        print_section("1. SOURCE PRODUCT DATA")
        print_info("ASIN", result.product_data.get('asin', 'N/A'))
        print_info("Original Title", result.product_data.get('title', 'N/A'))
        print_info("Brand", result.product_data.get('brand', 'N/A'))
        print_info("Source Price", format_price(result.product_data.get('price')))
        print_info("Availability", result.product_data.get('availability', 'N/A'))
        print_info("Rating", f"{result.product_data.get('rating', 0)}/5.0")
        print_info("Review Count", f"{result.product_data.get('review_count', 0):,}")

        if result.product_data.get('image_url'):
            print_info("Image URL", result.product_data['image_url'][:60] + "...")

        # 2. AI-Enhanced Content
        print_section("2. AI-ENHANCED CONTENT")

        enhanced_title = result.ai_content.get('enhanced_title', 'N/A')
        print_info("Enhanced Title", enhanced_title)

        if result.ai_content.get('ai_generated'):
            print_success("Content generated by AI")
            print_info("Quality Score", f"{result.ai_content.get('quality_score', 0) * 100:.1f}%")
        else:
            print_info("Content Source", "Template-based fallback")

        # Display description (first 200 chars)
        description = result.ai_content.get('enhanced_description', '')
        if description:
            print_info("\nProduct Description", f"({len(description)} characters)")
            print(f"\n{Colors.OKCYAN}{description[:300]}...{Colors.ENDC}\n")

        # Display bullet points
        bullet_points = result.ai_content.get('bullet_points', [])
        if bullet_points:
            print_info("Bullet Points", f"{len(bullet_points)} points")
            for i, point in enumerate(bullet_points, 1):
                print(f"  {i}. {point}")

        # Display keywords
        keywords = result.ai_content.get('keywords', [])
        if keywords:
            print_info("\nSEO Keywords", f"{len(keywords)} keywords")
            print(f"  {', '.join(keywords[:10])}")

        # 3. Optimized Images
        print_section("3. OPTIMIZED IMAGES")
        print_info("Image Count", len(result.optimized_images))
        for i, img in enumerate(result.optimized_images, 1):
            print_info(f"Image {i}", img if len(img) < 60 else img[:60] + "...")

        # 4. SEO Metadata
        print_section("4. SEO METADATA")
        seo = result.seo_metadata
        print_info("Meta Title", seo.get('meta_title', 'N/A'))
        print_info("Meta Description", seo.get('meta_description', 'N/A'))
        print_info("OG Title", seo.get('og_title', 'N/A'))
        print_info("Twitter Card", seo.get('twitter_card', 'N/A'))
        if seo.get('keywords'):
            print_info("SEO Keywords", f"{len(seo['keywords'])} keywords")

        # 5. Pricing Strategy
        print_section("5. PRICING STRATEGY")
        product = result.listing_ready.get('product', {})
        print_info("Cost Price", format_price(product.get('cost_price')))
        print_info("Selling Price", format_price(product.get('price')))
        print_info("Compare At Price", format_price(product.get('compare_at_price')))

        # Calculate profit
        cost = product.get('cost_price', 0)
        selling = product.get('price', 0)
        if cost and selling:
            profit = selling - cost
            margin = (profit / cost) * 100
            print_info("Profit Amount", format_price(profit))
            print_info("Profit Margin", f"{margin:.1f}%")

        # 6. Listing Ready Data
        print_section("6. LISTING READY FOR PUBLICATION")
        print_info("Platform", result.listing_ready.get('platform', 'N/A'))
        print_info("Ready for Publish", "Yes" if result.listing_ready.get('ready_for_publish') else "No")
        print_info("SKU", product.get('sku', 'N/A'))
        print_info("Stock Quantity", f"{product.get('stock_quantity', 0):,}")
        print_info("Category", product.get('category', 'N/A'))
        print_info("Subcategory", product.get('subcategory', 'N/A'))

        # 7. Attributes
        print_section("7. PRODUCT ATTRIBUTES")
        attributes = result.listing_ready.get('attributes', {})
        print_info("Source", attributes.get('source', 'N/A'))
        print_info("Source ASIN", attributes.get('source_asin', 'N/A'))
        print_info("Source Marketplace", attributes.get('source_marketplace', 'N/A'))

        # 8. Performance Prediction
        print_section("8. PERFORMANCE PREDICTION")
        prediction = result.listing_ready.get('performance_prediction', {})
        print_info("Conversion Rate", f"{prediction.get('estimated_conversion_rate', 0) * 100:.2f}%")
        print_info("Monthly Sales Estimate", f"{prediction.get('estimated_monthly_sales', 0)} units")
        print_info("Confidence Score", f"{prediction.get('confidence_score', 0) * 100:.1f}%")

        # 9. Workflow Metadata
        print_section("9. WORKFLOW METADATA")
        print_info("Workflow ID", result.workflow_id)
        print_info("Execution Time", f"{result.execution_time:.2f} seconds")
        print_info("Timestamp", result.timestamp)

        # Save complete result to JSON file
        output_file = f"workflow_result_{test_asin}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump({
                "workflow_id": result.workflow_id,
                "asin": result.asin,
                "success": result.success,
                "execution_time": result.execution_time,
                "timestamp": result.timestamp,
                "product_data": result.product_data,
                "ai_content": result.ai_content,
                "optimized_images": result.optimized_images,
                "seo_metadata": result.seo_metadata,
                "listing_ready": result.listing_ready
            }, f, indent=2, ensure_ascii=False)

        print_section("OUTPUT")
        print_success(f"Complete results saved to: {output_file}")

        # Summary
        print_header("TEST SUMMARY")
        print_success("Workflow executed successfully")
        print_success(f"Product: {enhanced_title}")
        print_success(f"Selling Price: {format_price(selling)}")
        print_success(f"Profit Margin: {margin:.1f}%")
        print_success(f"Processing Time: {execution_time:.2f}s")
        print_success("Listing ready for publication to Saleor")

    except Exception as e:
        print_error(f"Test failed: {str(e)}")
        import traceback
        print(f"\n{Colors.FAIL}{traceback.format_exc()}{Colors.ENDC}")

    finally:
        await workflow.close()
        print_info("\nTest Complete", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

if __name__ == "__main__":
    asyncio.run(test_complete_workflow())
