# BizOSaaS - Bizoholic Frontend Microservice Dockerfile
# Architecture: Independent containerized microservice following DDD principles
# Uses shared packages from GitHub Packages npm registry
# Date: October 30, 2025

# ============================================================================
# Stage 1: Dependencies
# ============================================================================
FROM node:18-alpine AS deps
WORKDIR /app

# Accept GitHub token as build arg for accessing private packages
ARG GITHUB_TOKEN
ENV GITHUB_TOKEN=$GITHUB_TOKEN

# Install libc6-compat for compatibility
RUN apk add --no-cache libc6-compat

# Configure npm to use GitHub Packages for @bizoholic-digital scope
RUN echo "@bizoholic-digital:registry=https://npm.pkg.github.com" > .npmrc && \
    echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> .npmrc

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies (including @bizosaas packages from GitHub Packages)
RUN npm ci --legacy-peer-deps

# Remove .npmrc to avoid leaking token
RUN rm -f .npmrc

# ============================================================================
# Stage 2: Builder
# ============================================================================
FROM node:18-alpine AS builder
WORKDIR /app

# Accept GitHub token for building
ARG GITHUB_TOKEN
ENV GITHUB_TOKEN=$GITHUB_TOKEN

# Configure npm for GitHub Packages
RUN echo "@bizoholic-digital:registry=https://npm.pkg.github.com" > .npmrc && \
    echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> .npmrc

# Copy package files
COPY package.json package-lock.json* ./

# Install all dependencies (including dev dependencies)
RUN npm ci --legacy-peer-deps

# Remove .npmrc
RUN rm -f .npmrc

# Copy source code
COPY . .

# Set environment variables for build
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build the Next.js application
RUN npm run build

# ============================================================================
# Stage 3: Runner
# ============================================================================
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy necessary files from builder
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set correct permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Start the application
CMD ["node", "server.js"]
