name: CI/CD Pipeline

on:
  push:
    branches: [ main, development, staging ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  K3S_KUBECONFIG: ${{ secrets.K3S_KUBECONFIG }}
  DOCKER_BUILDKIT: 1

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency Vulnerability Check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          cd n8n/crewai
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run Python security check
        run: |
          cd n8n/crewai
          safety check
          bandit -r . -f json -o bandit-report.json || true

  # Unit and Integration Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: bizoholic_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          cd n8n/crewai
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/bizoholic_test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env

      - name: Run database migrations
        run: |
          cd n8n/crewai
          python -m pytest tests/test_database_setup.py -v

      - name: Run unit tests
        run: |
          cd n8n/crewai
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./n8n/crewai/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd n8n/frontend
          npm ci

      - name: Run linting
        run: |
          cd n8n/frontend
          npm run lint

      - name: Run unit tests
        run: |
          cd n8n/frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./n8n/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # AI Agent Integration Tests
  test-ai-agents:
    name: AI Agent Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd n8n/crewai
          pip install -r requirements.txt
          pip install pytest-mock

      - name: Test AI Agent Configuration
        run: |
          cd n8n/crewai
          python -m pytest tests/test_agents/ -v --tb=short
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}

  # WordPress Integration Tests
  test-wordpress:
    name: WordPress Integration Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      - name: Setup WordPress Test Environment
        run: |
          cd n8n/wordpress
          bash tests/setup-test-environment.sh

      - name: Run WordPress Plugin Tests
        run: |
          cd n8n/wordpress
          ./vendor/bin/phpunit tests/

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install --with-deps

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run E2E tests
        run: |
          npx playwright test --config=tests/e2e/playwright.config.js

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: tests/e2e/test-results/

      - name: Cleanup test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' }}
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
          sudo mv k6 /usr/local/bin/

      - name: Start performance test environment
        run: |
          docker-compose -f docker-compose.perf.yml up -d
          sleep 45

      - name: Run load tests
        run: |
          k6 run tests/performance/load-test.js
          k6 run tests/performance/stress-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/results/

  # Build Docker Images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push CrewAI image
        id: build-crewai
        uses: docker/build-push-action@v5
        with:
          context: ./n8n/crewai
          file: ./n8n/crewai/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-crewai:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push WordPress image
        id: build-wordpress
        uses: docker/build-push-action@v5
        with:
          context: ./n8n/wordpress
          file: ./n8n/wordpress/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-wordpress:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./n8n/frontend
          file: ./n8n/frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-backend, test-frontend, test-ai-agents, test-wordpress]
    if: github.ref == 'refs/heads/development' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.bizoholic.com
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure K3s access
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K3S_KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update deployment manifests
        run: |
          sed -i 's|IMAGE_TAG|${{ github.sha }}|g' k8s/staging/*.yaml
          sed -i 's|REGISTRY_URL|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g' k8s/staging/*.yaml

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl rollout status deployment/bizoholic-crewai -n staging --timeout=600s
          kubectl rollout status deployment/bizoholic-wordpress -n staging --timeout=600s
          kubectl rollout status deployment/bizoholic-frontend -n staging --timeout=600s

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.bizoholic.com/health || exit 1
          curl -f https://staging.bizoholic.com/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"Staging deployment successful: ${{ github.sha }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-tests]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://bizoholic.com
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure K3s access
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K3S_KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Create deployment backup
        run: |
          kubectl get deployment -n production -o yaml > deployment-backup-${{ github.sha }}.yaml

      - name: Update deployment manifests
        run: |
          sed -i 's|IMAGE_TAG|${{ github.sha }}|g' k8s/production/*.yaml
          sed -i 's|REGISTRY_URL|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g' k8s/production/*.yaml

      - name: Deploy with blue-green strategy
        run: |
          # Deploy green environment
          kubectl apply -f k8s/production/green/
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/bizoholic-crewai-green -n production --timeout=600s
          kubectl rollout status deployment/bizoholic-wordpress-green -n production --timeout=600s
          kubectl rollout status deployment/bizoholic-frontend-green -n production --timeout=600s
          
          # Run health checks on green
          kubectl exec -n production deployment/bizoholic-frontend-green -- curl -f http://localhost:3000/health
          
          # Switch traffic to green
          kubectl patch service bizoholic-frontend -n production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service bizoholic-crewai -n production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service bizoholic-wordpress -n production -p '{"spec":{"selector":{"version":"green"}}}'          
          
          # Wait and verify
          sleep 60
          curl -f https://bizoholic.com/health
          
          # Clean up blue environment
          kubectl delete deployment bizoholic-crewai-blue -n production --ignore-not-found
          kubectl delete deployment bizoholic-wordpress-blue -n production --ignore-not-found
          kubectl delete deployment bizoholic-frontend-blue -n production --ignore-not-found

      - name: Run post-deployment tests
        run: |
          ./scripts/post-deployment-tests.sh production

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"Production deployment successful: ${{ github.sha }} - https://bizoholic.com"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback Job
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure K3s access
        run: |
          mkdir -p ~/.kube
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "${{ secrets.K3S_KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
            NAMESPACE="production"
          else
            echo "${{ secrets.K3S_KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
            NAMESPACE="staging"
          fi
          chmod 600 ~/.kube/config
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

      - name: Rollback to previous version
        run: |
          kubectl rollout undo deployment/bizoholic-crewai -n ${{ env.NAMESPACE }}
          kubectl rollout undo deployment/bizoholic-wordpress -n ${{ env.NAMESPACE }}
          kubectl rollout undo deployment/bizoholic-frontend -n ${{ env.NAMESPACE }}
          
          # Wait for rollback to complete
          kubectl rollout status deployment/bizoholic-crewai -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/bizoholic-wordpress -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/bizoholic-frontend -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Verify rollback
        run: |
          if [ "${{ env.NAMESPACE }}" = "production" ]; then
            curl -f https://bizoholic.com/health
          else
            curl -f https://staging.bizoholic.com/health
          fi

      - name: Notify rollback
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ALERT: Rollback executed for ${{ env.NAMESPACE }} environment due to deployment failure"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
